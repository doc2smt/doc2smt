#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 6)))
(assert (and  (= ?r (s!ze (mapping ?p0) 6))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= ?r 3))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?r 1))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 5)))))
(assert (= ?r 3))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= ?r 1))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 6th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 7th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 6)))))
(assert (= ?r 3))
********The 8th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= ?r 1))
********The 9th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))))
(assert (= ?r 3))
********The 10th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))))
(assert (= ?r 2))
********The 11th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
(assert (= ?r 2))
********The 12th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= ?r 3))
********The 13th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (= ?r 4))
********The 14th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (= ?r 2))
********The 15th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?r 1))
********The 16th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= ?r 3))
********The 17th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 18th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= ?r 4))
********The 19th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= ?r 4))
********The 20th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (= ?r 3))
********The 21th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 4)))))
(assert (= ?r 4))
********The 22th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 23th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= ?r 1))
********The 24th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2)))))
(assert (= ?r 4))
********The 25th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 5)))))
(assert (= ?r 3))
********The 26th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= ?r 3))
********The 27th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= ?r 1))
********The 28th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= ?r 5))
********The 29th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2)))))
(assert (= ?r 3))
********The 30th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3) (= x!1 5)))))
(assert (= ?r 4))
********The 31th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 32th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 6)))))
(assert (= ?r 3))
********The 33th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= ?r 1))
********The 34th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= ?r 1))
********The 35th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= ?r 1))
********The 36th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4)))))
(assert (= ?r 3))
********The 37th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= ?r 1))
********The 38th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 5)))))
(assert (= ?r 3))
********The 39th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?r 1))
********The 40th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))))
(assert (= ?r 2))
********The 41th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
(assert (= ?r 2))
********The 42th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
(assert (= ?r 2))
********The 43th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 6)))))
(assert (= ?r 4))
********The 44th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
(assert (= ?r 2))
********The 45th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= ?r 3))
********The 46th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 5)))))
(assert (= ?r 3))
********The 47th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 48th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (= ?r 2))
********The 49th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= ?r 1))
********The 50th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 51th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= ?r 2))
********The 52th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= ?r 2))
********The 53th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 54th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5) (= x!1 6)))))
(assert (= ?r 3))
********The 55th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= ?r 4))
********The 56th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
(assert (= ?r 2))
********The 57th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))))
(assert (= ?r 2))
********The 58th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 59th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))))
(assert (= ?r 2))
********The 60th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 61th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))))
(assert (= ?r 2))
********The 62th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= ?r 5))
********The 63th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))))
(assert (= ?r 3))
********The 64th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 4)))))
(assert (= ?r 4))
********The 65th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= ?r 1))
********The 66th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 4)))))
(assert (= ?r 3))
********The 67th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
(assert (= ?r 2))
********The 68th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 69th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= ?r 1))
********The 70th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 5)))))
(assert (= ?r 4))
********The 71th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 6)))))
(assert (= ?r 3))
********The 72th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= ?r 4))
********The 73th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 5)))))
(assert (= ?r 3))
********The 74th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1)))))
(assert (= ?r 3))
********The 75th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= ?r 1))
********The 76th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?r 1))
********The 77th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 78th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))))
(assert (= ?r 2))
********The 79th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 80th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
(assert (= ?r 2))
********The 81th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= ?r 4))
********The 82th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 6)))))
(assert (= ?r 3))
********The 83th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?r 1))
********The 84th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
(assert (= ?r 2))
********The 85th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))))
(assert (= ?r 2))
********The 86th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3)))))
(assert (= ?r 4))
********The 87th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 88th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= ?r 1))
********The 89th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 90th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= ?r 4))
********The 91th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?r 1))
********The 92th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?r 1))
********The 93th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 94th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
(assert (= ?r 2))
********The 95th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))))
(assert (= ?r 2))
********The 96th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 97th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r 0))
********The 98th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= ?r 1))
********The 99th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?r 1))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 6)))
(assert (and  (= ?r (s!ze (mapping ?p0) 6))))
********The 0th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 5)))))
********The 1th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
********The 2th model******** true
(assert (= ?r 1))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 3th model******** true
(assert (= ?r 4))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 3)))))
********The 4th model******** true
(assert (= ?r 0))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 5th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2)))))
********The 6th model******** true
(assert (= ?r 4))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 7th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))))
********The 8th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2)))))
********The 9th model******** true
(assert (= ?r 1))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
********The 10th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
********The 11th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
********The 12th model******** true
(assert (= ?r 1))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 13th model******** true
(assert (= ?r 1))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
********The 14th model******** true
(assert (= ?r 1))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
********The 15th model******** true
(assert (= ?r 1))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 16th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))))
********The 17th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
********The 18th model******** true
(assert (= ?r 1))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
********The 19th model******** true
(assert (= ?r 4))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 3)))))
********The 20th model******** true
(assert (= ?r 1))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
********The 21th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
********The 22th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
********The 23th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))))
********The 24th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
********The 25th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
********The 26th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
********The 27th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))))
********The 28th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3)))))
********The 29th model******** true
(assert (= ?r 1))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 30th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))))
********The 31th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
********The 32th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
********The 33th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))))
********The 34th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
********The 35th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))))
********The 36th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 5)))))
********The 37th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))))
********The 38th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
********The 39th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))))
********The 40th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
********The 41th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3)))))
********The 42th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
********The 43th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 6)))))
********The 44th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
********The 45th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
********The 46th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
********The 47th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
********The 48th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))))
********The 49th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 4)))))
********The 50th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
********The 51th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
********The 52th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 6)))))
********The 53th model******** true
(assert (= ?r 3))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 6)))))
********The 54th model******** true
(assert (= ?r 2))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r Bool)
(assert (= ?r (= (s!ze (mapping ?p0) 6) 0)))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5)))))
(assert (= ?r false))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= ?r false))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
(assert (= ?r false))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 5)))))
(assert (= ?r false))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))))
(assert (= ?r false))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?r false))
********The 6th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= ?r false))
********The 7th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 8th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
(assert (= ?r false))
********The 9th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 10th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?r false))
********The 11th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?r false))
********The 12th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 13th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))))
(assert (= ?r false))
********The 14th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 15th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 5)))))
(assert (= ?r false))
********The 16th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))))
(assert (= ?r false))
********The 17th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= ?r false))
********The 18th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 19th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (= ?r false))
********The 20th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3) (= x!1 4)))))
(assert (= ?r false))
********The 21th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
(assert (= ?r false))
********The 22th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3)))))
(assert (= ?r false))
********The 23th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 24th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 5)))))
(assert (= ?r false))
********The 25th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= ?r false))
********The 26th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= ?r false))
********The 27th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= ?r false))
********The 28th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= ?r false))
********The 29th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 30th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 6)))))
(assert (= ?r false))
********The 31th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 32th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= ?r false))
********The 33th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?r false))
********The 34th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))))
(assert (= ?r false))
********The 35th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 5)))))
(assert (= ?r false))
********The 36th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= ?r false))
********The 37th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= ?r false))
********The 38th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
(assert (= ?r false))
********The 39th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= ?r false))
********The 40th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?r false))
********The 41th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (= ?r false))
********The 42th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 43th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= ?r false))
********The 44th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 45th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 46th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 6)))))
(assert (= ?r false))
********The 47th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 5)))))
(assert (= ?r false))
********The 48th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
(assert (= ?r false))
********The 49th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))))
(assert (= ?r false))
********The 50th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 51th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))))
(assert (= ?r false))
********The 52th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
(assert (= ?r false))
********The 53th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= ?r false))
********The 54th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
(assert (= ?r false))
********The 55th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= ?r false))
********The 56th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= ?r false))
********The 57th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 5)))))
(assert (= ?r false))
********The 58th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
(assert (= ?r false))
********The 59th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 60th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4)))))
(assert (= ?r false))
********The 61th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= ?r false))
********The 62th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 63th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))))
(assert (= ?r false))
********The 64th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= ?r false))
********The 65th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0)))))
(assert (= ?r false))
********The 66th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= ?r false))
********The 67th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4)))))
(assert (= ?r false))
********The 68th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))))
(assert (= ?r false))
********The 69th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
(assert (= ?r false))
********The 70th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (= ?r false))
********The 71th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= ?r false))
********The 72th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))))
(assert (= ?r false))
********The 73th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3)))))
(assert (= ?r false))
********The 74th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (= ?r false))
********The 75th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?r false))
********The 76th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3)))))
(assert (= ?r false))
********The 77th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= ?r false))
********The 78th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= ?r false))
********The 79th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 6)))))
(assert (= ?r false))
********The 80th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))))
(assert (= ?r false))
********The 81th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= ?r false))
********The 82th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4)))))
(assert (= ?r false))
********The 83th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= ?r false))
********The 84th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= ?r false))
********The 85th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
(assert (= ?r false))
********The 86th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (= ?r false))
********The 87th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 88th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?r false))
********The 89th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= ?r false))
********The 90th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 91th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?r true))
********The 92th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= ?r false))
********The 93th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 5)))))
(assert (= ?r false))
********The 94th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3)))))
(assert (= ?r false))
********The 95th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (= ?r false))
********The 96th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (= ?r false))
********The 97th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= ?r false))
********The 98th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= ?r false))
********The 99th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4) (= x!1 5)))))
(assert (= ?r false))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r Bool)
(assert (= ?r (= (s!ze (mapping ?p0) 6) 0)))
********The 0th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 5)))))
********The 1th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))))
********The 2th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
********The 3th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
********The 4th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 6)))))
********The 5th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 5)))))
********The 6th model******** true
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 7th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 8th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4)))))
********The 9th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
********The 10th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
********The 11th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 6)))))
********The 12th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
********The 13th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))))
********The 14th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
********The 15th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
********The 16th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
********The 17th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))))
********The 18th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
********The 19th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 20th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))))
********The 21th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 22th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
********The 23th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
********The 24th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))))
********The 25th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
********The 26th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
********The 27th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
********The 28th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))))
********The 29th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
********The 30th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))))
********The 31th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
********The 32th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 5)))))
********The 33th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 34th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
********The 35th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
********The 36th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))))
********The 37th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
********The 38th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
********The 39th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))))
********The 40th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 5)))))
********The 41th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))))
********The 42th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))))
********The 43th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
********The 44th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
********The 45th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))))
********The 46th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
********The 47th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
********The 48th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))))
********The 49th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 6)))))
********The 50th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 5)))))
********The 51th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4)))))
********The 52th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4)))))
********The 53th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
********The 54th model******** true
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 5)))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r Bool)
(assert (and  (= ?r (select (mapping ?p0) ?p1))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= ?p1 6))
(assert (= ?r false))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= ?p1 5))
(assert (= ?r false))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4)))))
(assert (= ?p1 4))
(assert (= ?r true))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= ?p1 0))
(assert (= ?r true))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= ?p1 5))
(assert (= ?r true))
********The 6th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
(assert (= ?p1 4))
(assert (= ?r false))
********The 7th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= ?p1 1))
(assert (= ?r false))
********The 8th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (= ?p1 -2))
(assert (= ?r false))
********The 9th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 6)))))
(assert (= ?p1 6))
(assert (= ?r true))
********The 10th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= ?p1 0))
(assert (= ?r false))
********The 11th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 3))
(assert (= ?r false))
********The 12th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4)))))
(assert (= ?p1 -1))
(assert (= ?r true))
********The 13th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= ?p1 6))
(assert (= ?r false))
********The 14th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4)))))
(assert (= ?p1 6))
(assert (= ?r false))
********The 15th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= ?p1 5))
(assert (= ?r false))
********The 16th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 3)))))
(assert (= ?p1 5))
(assert (= ?r false))
********The 17th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3) (= x!1 6)))))
(assert (= ?p1 5))
(assert (= ?r false))
********The 18th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= ?p1 1))
(assert (= ?r true))
********The 19th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?p1 3))
(assert (= ?r true))
********The 20th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5)))))
(assert (= ?p1 2))
(assert (= ?r false))
********The 21th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= ?p1 3))
(assert (= ?r true))
********The 22th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 6)))))
(assert (= ?p1 6))
(assert (= ?r true))
********The 23th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (= ?p1 6))
(assert (= ?r false))
********The 24th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 6))
(assert (= ?r false))
********The 25th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= ?p1 -2))
(assert (= ?r true))
********The 26th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?p1 -1))
(assert (= ?r true))
********The 27th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= ?p1 5))
(assert (= ?r true))
********The 28th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?p1 2))
(assert (= ?r false))
********The 29th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 5)))))
(assert (= ?p1 -1))
(assert (= ?r true))
********The 30th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= ?p1 3))
(assert (= ?r false))
********The 31th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))))
(assert (= ?p1 6))
(assert (= ?r false))
********The 32th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 33th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 34th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2)))))
(assert (= ?p1 5))
(assert (= ?r false))
********The 35th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= ?p1 3))
(assert (= ?r false))
********The 36th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 37th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))))
(assert (= ?p1 3))
(assert (= ?r false))
********The 38th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))))
(assert (= ?p1 6))
(assert (= ?r false))
********The 39th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 -2))
(assert (= ?r false))
********The 40th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 2))
(assert (= ?r false))
********The 41th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (= ?p1 3))
(assert (= ?r true))
********The 42th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))))
(assert (= ?p1 0))
(assert (= ?r false))
********The 43th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
(assert (= ?p1 4))
(assert (= ?r false))
********The 44th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= ?p1 4))
(assert (= ?r false))
********The 45th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 5)))))
(assert (= ?p1 3))
(assert (= ?r false))
********The 46th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 47th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 6)))))
(assert (= ?p1 4))
(assert (= ?r false))
********The 48th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= ?p1 -2))
(assert (= ?r false))
********The 49th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 -2))
(assert (= ?r false))
********The 50th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 0))
(assert (= ?r false))
********The 51th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 52th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 3))
(assert (= ?r false))
********The 53th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 4))
(assert (= ?r false))
********The 54th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1)))))
(assert (= ?p1 -2))
(assert (= ?r true))
********The 55th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= ?p1 3))
(assert (= ?r false))
********The 56th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))))
(assert (= ?p1 6))
(assert (= ?r true))
********The 57th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
(assert (= ?p1 3))
(assert (= ?r false))
********The 58th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?p1 6))
(assert (= ?r false))
********The 59th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1)))))
(assert (= ?p1 -2))
(assert (= ?r true))
********The 60th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= ?p1 5))
(assert (= ?r false))
********The 61th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 5)))))
(assert (= ?p1 4))
(assert (= ?r false))
********The 62th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 3))
(assert (= ?r false))
********The 63th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 64th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= ?p1 -2))
(assert (= ?r false))
********The 65th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
(assert (= ?p1 3))
(assert (= ?r true))
********The 66th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= ?p1 6))
(assert (= ?r true))
********The 67th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 4) (= x!1 6)))))
(assert (= ?p1 2))
(assert (= ?r false))
********The 68th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 6)))))
(assert (= ?p1 3))
(assert (= ?r true))
********The 69th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4) (= x!1 5)))))
(assert (= ?p1 6))
(assert (= ?r false))
********The 70th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4)))))
(assert (= ?p1 0))
(assert (= ?r true))
********The 71th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
(assert (= ?p1 0))
(assert (= ?r false))
********The 72th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 73th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= ?p1 -1))
(assert (= ?r true))
********The 74th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= ?p1 1))
(assert (= ?r true))
********The 75th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= ?p1 4))
(assert (= ?r false))
********The 76th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 6)))))
(assert (= ?p1 4))
(assert (= ?r false))
********The 77th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))))
(assert (= ?p1 2))
(assert (= ?r true))
********The 78th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (= ?p1 2))
(assert (= ?r false))
********The 79th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))))
(assert (= ?p1 5))
(assert (= ?r false))
********The 80th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4)))))
(assert (= ?p1 5))
(assert (= ?r false))
********The 81th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 4))
(assert (= ?r false))
********The 82th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= ?p1 0))
(assert (= ?r false))
********The 83th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 3))
(assert (= ?r false))
********The 84th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))))
(assert (= ?p1 4))
(assert (= ?r false))
********The 85th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3)))))
(assert (= ?p1 1))
(assert (= ?r true))
********The 86th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= ?p1 -1))
(assert (= ?r true))
********The 87th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= ?p1 6))
(assert (= ?r true))
********The 88th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (= ?p1 1))
(assert (= ?r false))
********The 89th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
(assert (= ?p1 1))
(assert (= ?r false))
********The 90th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 91th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5) (= x!1 6)))))
(assert (= ?p1 3))
(assert (= ?r true))
********The 92th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 5))
(assert (= ?r false))
********The 93th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 1))
(assert (= ?r false))
********The 94th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= ?p1 -1))
(assert (= ?r false))
********The 95th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
(assert (= ?p1 4))
(assert (= ?r false))
********The 96th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3) (= x!1 6)))))
(assert (= ?p1 1))
(assert (= ?r false))
********The 97th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 3))
(assert (= ?r false))
********The 98th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= ?p1 5))
(assert (= ?r false))
********The 99th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3)))))
(assert (= ?p1 0))
(assert (= ?r true))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 Int)
(assert (and (>= ?p1 -2) (<= ?p1 7)))
(declare-const ?r Bool)
(assert (and  (= ?r (select (mapping ?p0) ?p1))))
********The 0th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 1th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 2th model******** true
(assert (= ?p1 1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 6)))))
********The 3th model******** true
(assert (= ?p1 0))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
********The 4th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 5th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 6th model******** true
(assert (= ?p1 6))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 7th model******** true
(assert (= ?p1 -2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 8th model******** true
(assert (= ?p1 2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 9th model******** true
(assert (= ?p1 1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 10th model******** true
(assert (= ?p1 1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 11th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 12th model******** true
(assert (= ?p1 1))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
********The 13th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 6)))))
********The 14th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
********The 15th model******** true
(assert (= ?p1 5))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 6)))))
********The 16th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
********The 17th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 18th model******** true
(assert (= ?p1 4))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 19th model******** true
(assert (= ?p1 3))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 20th model******** true
(assert (= ?p1 2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 21th model******** true
(assert (= ?p1 -2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 22th model******** true
(assert (= ?p1 1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 4) (= x!1 5)))))
********The 23th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 24th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
********The 25th model******** true
(assert (= ?p1 0))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 26th model******** true
(assert (= ?p1 -1))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 5)))))
********The 27th model******** true
(assert (= ?p1 0))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 28th model******** true
(assert (= ?p1 6))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2)))))
********The 29th model******** true
(assert (= ?p1 -2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
********The 30th model******** true
(assert (= ?p1 1))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 6)))))
********The 31th model******** true
(assert (= ?p1 5))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
********The 32th model******** true
(assert (= ?p1 2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4)))))
********The 33th model******** true
(assert (= ?p1 -2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
********The 34th model******** true
(assert (= ?p1 4))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 35th model******** true
(assert (= ?p1 5))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 36th model******** true
(assert (= ?p1 5))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
********The 37th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
********The 38th model******** true
(assert (= ?p1 6))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 39th model******** true
(assert (= ?p1 0))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
********The 40th model******** true
(assert (= ?p1 0))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))))
********The 41th model******** true
(assert (= ?p1 4))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 42th model******** true
(assert (= ?p1 6))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4) (= x!1 5)))))
********The 43th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 6)))))
********The 44th model******** true
(assert (= ?p1 0))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 5) (= x!1 6)))))
********The 45th model******** true
(assert (= ?p1 2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 46th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
********The 47th model******** true
(assert (= ?p1 3))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 48th model******** true
(assert (= ?p1 3))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 49th model******** true
(assert (= ?p1 6))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 50th model******** true
(assert (= ?p1 -1))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))))
********The 51th model******** true
(assert (= ?p1 2))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 5) (= x!1 6)))))
********The 52th model******** true
(assert (= ?p1 1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
********The 53th model******** true
(assert (= ?p1 0))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
********The 54th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))))
********The 55th model******** true
(assert (= ?p1 -2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
********The 56th model******** true
(assert (= ?p1 4))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 57th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 58th model******** true
(assert (= ?p1 0))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 59th model******** true
(assert (= ?p1 0))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 60th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 61th model******** true
(assert (= ?p1 4))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5)))))
********The 62th model******** true
(assert (= ?p1 5))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
********The 63th model******** true
(assert (= ?p1 3))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5)))))
********The 64th model******** true
(assert (= ?p1 5))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 65th model******** true
(assert (= ?p1 5))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 66th model******** true
(assert (= ?p1 -2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 67th model******** true
(assert (= ?p1 1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3)))))
********The 68th model******** true
(assert (= ?p1 -2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
********The 69th model******** true
(assert (= ?p1 5))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 5) (= x!1 6)))))
********The 70th model******** true
(assert (= ?p1 5))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 71th model******** true
(assert (= ?p1 1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4)))))
********The 72th model******** true
(assert (= ?p1 2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 6)))))
********The 73th model******** true
(assert (= ?p1 1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
********The 74th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3)))))
********The 75th model******** true
(assert (= ?p1 3))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))))
********The 76th model******** true
(assert (= ?p1 -1))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 77th model******** true
(assert (= ?p1 2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))))
********The 78th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
********The 79th model******** true
(assert (= ?p1 3))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 6)))))
********The 80th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
********The 81th model******** true
(assert (= ?p1 6))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
********The 82th model******** true
(assert (= ?p1 3))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
********The 83th model******** true
(assert (= ?p1 4))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 84th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 85th model******** true
(assert (= ?p1 6))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3)))))
********The 86th model******** true
(assert (= ?p1 0))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))))
********The 87th model******** true
(assert (= ?p1 -2))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 6)))))
********The 88th model******** true
(assert (= ?p1 4))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
********The 89th model******** true
(assert (= ?p1 6))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 90th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
********The 91th model******** true
(assert (= ?p1 6))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 92th model******** true
(assert (= ?p1 3))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 93th model******** true
(assert (= ?p1 0))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 94th model******** true
(assert (= ?p1 5))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 95th model******** true
(assert (= ?p1 4))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
********The 96th model******** true
(assert (= ?p1 7))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))))
********The 97th model******** true
(assert (= ?p1 0))
(assert (= ?r true))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 98th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
********The 99th model******** true
(assert (= ?p1 -1))
(assert (= ?r false))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Iterator Int))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (Iterator Int))
(assert (and (and (= (mapping t0) (mapping ?p0)) (forall ((x Int)) (not (select (previous t0) x)))) (= ?r t0)))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 6th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 7th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 8th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 9th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 10th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 11th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 12th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 13th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 14th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 15th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 16th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 17th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 18th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 19th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 20th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 21th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 22th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 23th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 24th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 25th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 26th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 27th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 28th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 29th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 30th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 31th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 32th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 33th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 34th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 35th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 36th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 37th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 38th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 39th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 40th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 41th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 42th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 43th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 44th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 45th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 46th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 47th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 48th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 49th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 50th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 51th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 52th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 53th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 54th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 55th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 56th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 57th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 58th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 59th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 60th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 61th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 62th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 63th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 64th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 65th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 66th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 67th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 68th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 69th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 5) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 5) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 70th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 71th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 72th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 73th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 74th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 75th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 76th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 77th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 78th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 79th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 80th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 81th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 82th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 83th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 84th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 85th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 86th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 87th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 88th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 89th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 90th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 91th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 92th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 93th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 94th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 95th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 96th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 97th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 98th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
********The 99th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 6)))) (= (previous ?r) (lambda ((x!1 Int)) false))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Iterator Int))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (Iterator Int))
(assert (and (and (= (mapping t0) (mapping ?p0)) (forall ((x Int)) (not (select (previous t0) x)))) (= ?r t0)))
********The 0th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
********The 1th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
********The 2th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5)))))
********The 3th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 6)))))
********The 4th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 5)))))
********The 5th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 6th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
********The 7th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 5)))))
********The 8th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1)))))
********The 9th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))))
********The 10th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
********The 11th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))))
********The 12th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3)))))
********The 13th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 6)))))
********The 14th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 5)))))
********The 15th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
********The 16th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
********The 17th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 18th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3) (= x!1 5)))))
********The 19th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 5)))))
********The 20th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 21th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))))
********The 22th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))))
********The 23th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))))
********The 24th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))))
********The 25th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
********The 26th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))))
********The 27th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
********The 28th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
********The 29th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
********The 30th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 31th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
********The 32th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1)))))
********The 33th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))))
********The 34th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
********The 35th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
********The 36th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
********The 37th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
********The 38th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
********The 39th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
********The 40th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
********The 41th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
********The 42th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))))
********The 43th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
********The 44th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
********The 45th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
********The 46th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
********The 47th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 6)))))
********The 48th model******** true
(assert (and (= (mapping ?r) (lambda ((x!1 Int)) false)) (= (previous ?r) (lambda ((x!1 Int)) false))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?r) x))))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 2))))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 5))))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 3) (seq.unit 6))))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4) (seq.unit 6))))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 6th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 3) (seq.unit 6))))
********The 7th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 3))))
********The 8th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 9th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 4))))
********The 10th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 5))))
********The 11th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 12th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 5))))
********The 13th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 4) (seq.unit 5))))
********The 14th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4) (seq.unit 5))))
********The 15th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 3) (seq.unit 5))))
********The 16th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1))))
********The 17th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3) (seq.unit 6))))
********The 18th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 3))))
********The 19th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 6))))
********The 20th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 2) (seq.unit 3))))
********The 21th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 22th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 6))))
********The 23th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 3) (seq.unit 4) (seq.unit 6))))
********The 24th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 25th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 2) (seq.unit 6))))
********The 26th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 27th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 5))))
********The 28th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3) (seq.unit 5))))
********The 29th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2))))
********The 30th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3) (seq.unit 4))))
********The 31th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 32th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 33th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 34th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 5) (seq.unit 6))))
********The 35th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 36th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 37th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4))))
********The 38th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 3))))
********The 39th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 3))))
********The 40th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0))))
********The 41th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 42th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 43th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 6))))
********The 44th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1))))
********The 45th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 46th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 3))))
********The 47th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 48th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 4) (seq.unit 6))))
********The 49th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 50th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 2) (seq.unit 3))))
********The 51th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4))))
********The 52th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 4))))
********The 53th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 2) (seq.unit 4))))
********The 54th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 55th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 56th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1) (seq.unit 5))))
********The 57th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 5))))
********The 58th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 4) (seq.unit 6))))
********The 59th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2))))
********The 60th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 61th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 3))))
********The 62th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 63th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 64th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 65th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 66th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 67th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 3) (seq.unit 4) (seq.unit 6))))
********The 68th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 4) (seq.unit 5))))
********The 69th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 6))))
********The 70th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 71th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0))))
********The 72th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 73th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 74th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 75th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 76th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 77th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 78th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4) (seq.unit 6))))
********The 79th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 80th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 81th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 82th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 4))))
********The 83th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3))))
********The 84th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 5))))
********The 85th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 86th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1))))
********The 87th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 88th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 89th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 90th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 91th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 92th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 93th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1) (seq.unit 3))))
********The 94th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 4) (seq.unit 5))))
********The 95th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 2))))
********The 96th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4))))
********The 97th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 3))))
********The 98th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 99th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4) (seq.unit 6))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?r) x))))))
********The 0th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 2) (seq.unit 3) (seq.unit 0) (seq.unit -2) (seq.unit 1))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?r) x) (select (mapping ?p0) x))))))
********The 0th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 2) (seq.unit 6))))
********The 1th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 4))))
********The 2th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 3th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 4) (seq.unit 6))))
********The 4th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 3) (seq.unit 5))))
********The 5th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 6th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3) (seq.unit 4) (seq.unit 6))))
********The 7th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 3))))
********The 8th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 9th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4) (seq.unit 5))))
********The 10th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 6))))
********The 11th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 4))))
********The 12th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 5) (seq.unit 6))))
********The 13th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1))))
********The 14th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 15th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0))))
********The 16th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 17th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 18th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 19th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 3))))
********The 20th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 4))))
********The 21th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 22th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1) (seq.unit 5))))
********The 23th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3))))
********The 24th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 5))))
********The 25th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2))))
********The 26th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 3) (seq.unit 4))))
********The 27th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 3) (seq.unit 4))))
********The 28th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3) (seq.unit 5))))
********The 29th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 6))))
********The 30th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 2) (seq.unit 4))))
********The 31th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4) (seq.unit 5))))
********The 32th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 2) (seq.unit 5))))
********The 33th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 5))))
********The 34th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 3) (seq.unit 6))))
********The 35th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 3) (seq.unit 4))))
********The 36th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 37th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1))))
********The 38th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 39th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 40th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 2) (seq.unit 4) (seq.unit 6))))
********The 41th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4) (seq.unit 5))))
********The 42th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 5))))
********The 43th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 3) (seq.unit 6))))
********The 44th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 45th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 46th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 47th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 48th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 5) (seq.unit 6))))
********The 49th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 4) (seq.unit 5))))
********The 50th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3))))
********The 51th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 6))))
********The 52th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 5) (seq.unit 6))))
********The 53th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 54th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 5))))
********The 55th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 56th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 4))))
********The 57th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 58th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 4))))
********The 59th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 6))))
********The 60th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 5) (seq.unit 6))))
********The 61th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 62th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 5) (seq.unit 6))))
********The 63th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1) (seq.unit 2) (seq.unit 4))))
********The 64th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 65th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4))))
********The 66th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 3))))
********The 67th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 4))))
********The 68th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 69th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 70th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 71th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 6))))
********The 72th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 73th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 74th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4))))
********The 75th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 76th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 77th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 2) (seq.unit 5))))
********The 78th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2))))
********The 79th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 80th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 81th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 3) (seq.unit 6))))
********The 82th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 83th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 84th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 6))))
********The 85th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 6))))
********The 86th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 87th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 4))))
********The 88th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 5))))
********The 89th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 90th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4) (seq.unit 6))))
********The 91th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 92th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 93th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1) (seq.unit 5))))
********The 94th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 95th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 4) (seq.unit 6))))
********The 96th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4) (seq.unit 5))))
********The 97th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 98th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 6))))
********The 99th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?r) x) (select (mapping ?p0) x))))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?r) x))))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 6))))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3) (seq.unit 5))))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 3) (seq.unit 5) (seq.unit 6))))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1))))
********The 6th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 7th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 5))))
********The 8th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 6))))
********The 9th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 2) (seq.unit 4) (seq.unit 6))))
********The 10th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4))))
********The 11th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 12th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 13th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 14th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 2) (seq.unit 5))))
********The 15th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 16th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 3))))
********The 17th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 18th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 4) (seq.unit 5))))
********The 19th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 20th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3) (seq.unit 5))))
********The 21th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 22th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4) (seq.unit 6))))
********The 23th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 6))))
********The 24th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 4) (seq.unit 6))))
********The 25th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 26th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 27th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 28th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 6))))
********The 29th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 5))))
********The 30th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 3))))
********The 31th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 3))))
********The 32th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 33th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 34th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 35th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1))))
********The 36th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 5))))
********The 37th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 38th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4) (seq.unit 5))))
********The 39th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 40th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 41th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 42th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 43th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 44th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 45th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4) (seq.unit 5))))
********The 46th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 4))))
********The 47th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 6))))
********The 48th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 5) (seq.unit 6))))
********The 49th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 50th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 51th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 4) (seq.unit 6))))
********The 52th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 53th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 3))))
********The 54th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 5))))
********The 55th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 4))))
********The 56th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 4) (seq.unit 6))))
********The 57th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 2) (seq.unit 3))))
********The 58th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 59th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3))))
********The 60th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 2) (seq.unit 4))))
********The 61th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 62th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 2))))
********The 63th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 64th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4) (seq.unit 5))))
********The 65th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2))))
********The 66th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 67th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 4) (seq.unit 5))))
********The 68th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 69th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1))))
********The 70th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 3) (seq.unit 5))))
********The 71th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 5))))
********The 72th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 73th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3))))
********The 74th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 2) (seq.unit 6))))
********The 75th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 76th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 5))))
********The 77th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 78th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 3) (seq.unit 6))))
********The 79th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 80th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3) (seq.unit 4) (seq.unit 6))))
********The 81th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0))))
********The 82th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 6))))
********The 83th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 4))))
********The 84th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 2))))
********The 85th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 6))))
********The 86th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 87th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 88th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 89th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2))))
********The 90th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1))))
********The 91th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 92th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 3))))
********The 93th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 94th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3))))
********The 95th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 96th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 97th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 98th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 6))))
********The 99th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 3) (seq.unit 4))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?r) x))))))
********The 0th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 2) (seq.unit 3) (seq.unit 0) (seq.unit -2) (seq.unit 1))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?p0) x))))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3))))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 5) (seq.unit 6))))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 6))))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3) (seq.unit 4) (seq.unit 5))))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 4) (seq.unit 6))))
********The 6th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 6))))
********The 7th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 8th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 9th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2))))
********The 10th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4) (seq.unit 5))))
********The 11th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 12th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 2) (seq.unit 6))))
********The 13th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 4))))
********The 14th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1))))
********The 15th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 4))))
********The 16th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3) (seq.unit 6))))
********The 17th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 18th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 5))))
********The 19th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 4))))
********The 20th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 5))))
********The 21th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 4))))
********The 22th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 6))))
********The 23th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 24th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 25th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3) (seq.unit 6))))
********The 26th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 5))))
********The 27th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 28th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 2) (seq.unit 4))))
********The 29th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3) (seq.unit 4))))
********The 30th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 31th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3))))
********The 32th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 4) (seq.unit 5))))
********The 33th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 3) (seq.unit 4))))
********The 34th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4))))
********The 35th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 5))))
********The 36th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 5) (seq.unit 6))))
********The 37th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 38th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 3) (seq.unit 4))))
********The 39th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 4))))
********The 40th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 5))))
********The 41th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 3))))
********The 42th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 43th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 44th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2))))
********The 45th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 46th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1))))
********The 47th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 5))))
********The 48th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 6))))
********The 49th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 2) (seq.unit 4))))
********The 50th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2))))
********The 51th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 3) (seq.unit 5))))
********The 52th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2))))
********The 53th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 54th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 55th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 2) (seq.unit 3))))
********The 56th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1))))
********The 57th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 5))))
********The 58th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 4))))
********The 59th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 60th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 6))))
********The 61th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1))))
********The 62th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 5))))
********The 63th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 64th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 4) (seq.unit 6))))
********The 65th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 66th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3) (seq.unit 4))))
********The 67th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 2) (seq.unit 6))))
********The 68th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 5))))
********The 69th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 70th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 71th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 72th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2))))
********The 73th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 3))))
********The 74th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 5) (seq.unit 6))))
********The 75th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 76th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 77th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 78th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 3))))
********The 79th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 4))))
********The 80th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 6))))
********The 81th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 6))))
********The 82th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 83th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 4))))
********The 84th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 5))))
********The 85th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 86th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 4) (seq.unit 6))))
********The 87th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 88th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 5))))
********The 89th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 90th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 91th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 92th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 93th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 94th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 3))))
********The 95th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 96th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3) (seq.unit 4))))
********The 97th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3))))
********The 98th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 3) (seq.unit 4))))
********The 99th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?p0) x))))))
********The 0th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit -2))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 6)))))
********The 1th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 2) (seq.unit 3) (seq.unit 0) (seq.unit -2))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
********The 2th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 6) (seq.unit -2) (seq.unit 3) (seq.unit 1) (seq.unit 2))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 3th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 5) (seq.unit -1) (seq.unit 2) (seq.unit 6))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?p0) x))))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 6))))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 4))))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 4))))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 6))))
********The 6th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 7th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 8th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 9th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2))))
********The 10th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 5))))
********The 11th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1))))
********The 12th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 3))))
********The 13th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1) (seq.unit 5))))
********The 14th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 15th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 2) (seq.unit 5))))
********The 16th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 6))))
********The 17th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 3) (seq.unit 4) (seq.unit 5))))
********The 18th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 19th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 5))))
********The 20th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 21th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 22th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 23th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3))))
********The 24th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 25th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 5))))
********The 26th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 27th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0))))
********The 28th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 3) (seq.unit 6))))
********The 29th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 4))))
********The 30th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 31th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3))))
********The 32th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 3) (seq.unit 6))))
********The 33th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 5) (seq.unit 6))))
********The 34th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 35th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 6))))
********The 36th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 37th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 38th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4))))
********The 39th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 6))))
********The 40th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 41th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 5) (seq.unit 6))))
********The 42th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0))))
********The 43th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 6))))
********The 44th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 6))))
********The 45th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 46th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1))))
********The 47th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0))))
********The 48th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 49th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4))))
********The 50th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 4) (seq.unit 5))))
********The 51th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 52th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 53th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 54th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 55th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 5) (seq.unit 6))))
********The 56th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 57th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 6))))
********The 58th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 3) (seq.unit 5))))
********The 59th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 60th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 61th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4))))
********The 62th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 63th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 64th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 5))))
********The 65th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 66th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 5))))
********The 67th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 2) (seq.unit 4))))
********The 68th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 69th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 70th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 71th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 6))))
********The 72th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 73th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4) (seq.unit 5))))
********The 74th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 2) (seq.unit 5))))
********The 75th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 6))))
********The 76th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 2) (seq.unit 4) (seq.unit 6))))
********The 77th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3) (seq.unit 4))))
********The 78th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 79th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 5))))
********The 80th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 81th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 3) (seq.unit 5) (seq.unit 6))))
********The 82th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 4))))
********The 83th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 84th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 5) (seq.unit 6))))
********The 85th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 86th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 87th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 6))))
********The 88th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 89th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 90th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 4))))
********The 91th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 92th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 4))))
********The 93th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 6))))
********The 94th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0))))
********The 95th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 5) (seq.unit 6))))
********The 96th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 5) (seq.unit 6))))
********The 97th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4) (seq.unit 6))))
********The 98th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 6))))
********The 99th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?p0) x))))))
********The 0th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit -2))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 6)))))
********The 1th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 2) (seq.unit 3) (seq.unit 0) (seq.unit -2))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
********The 2th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 6) (seq.unit -2) (seq.unit 3) (seq.unit 1) (seq.unit 2))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 3th model******** false
(assert (= (element ?r) (seq.++ (seq.unit 5) (seq.unit -1) (seq.unit 2) (seq.unit 6))))
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?r) x) (select (mapping ?p0) x))))))
********The 0th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 5))))
********The 1th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 3th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 4th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 4) (seq.unit 6))))
********The 5th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3))))
********The 6th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3) (seq.unit 6))))
********The 7th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 8th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 9th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 2) (seq.unit 4) (seq.unit 6))))
********The 10th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 11th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 3) (seq.unit 5))))
********The 12th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 3))))
********The 13th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 5) (seq.unit 6))))
********The 14th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1))))
********The 15th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 5))))
********The 16th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 2) (seq.unit 6))))
********The 17th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 18th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1) (seq.unit 2) (seq.unit 4))))
********The 19th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4))))
********The 20th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 21th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 3))))
********The 22th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3) (seq.unit 6))))
********The 23th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 24th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 5))))
********The 25th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 6))))
********The 26th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 27th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 6))))
********The 28th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3))))
********The 29th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4) (seq.unit 5))))
********The 30th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 31th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2))))
********The 32th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 3) (seq.unit 5))))
********The 33th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 5))))
********The 34th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 35th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 2) (seq.unit 4))))
********The 36th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 5) (seq.unit 6))))
********The 37th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 6))))
********The 38th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 39th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 6))))
********The 40th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 41th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 42th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 43th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 44th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2))))
********The 45th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 46th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 47th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4) (seq.unit 5))))
********The 48th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 6))))
********The 49th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 50th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4))))
********The 51th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 52th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 53th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 54th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 2))))
********The 55th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 56th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 57th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 58th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 59th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4) (seq.unit 5))))
********The 60th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 5))))
********The 61th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 1))))
********The 62th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 63th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 4) (seq.unit 5))))
********The 64th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 65th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3))))
********The 66th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2))))
********The 67th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1) (seq.unit 2))))
********The 68th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 6))))
********The 69th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 70th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 71th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 3) (seq.unit 6))))
********The 72th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 6))))
********The 73th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3))))
********The 74th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0))))
********The 75th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1))))
********The 76th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 3) (seq.unit 5))))
********The 77th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3) (seq.unit 5))))
********The 78th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 79th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 6))))
********The 80th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 81th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3))))
********The 82th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 83th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 4))))
********The 84th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 85th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 86th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 3) (seq.unit 6))))
********The 87th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 5) (seq.unit 6))))
********The 88th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 89th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2))))
********The 90th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 4) (seq.unit 6))))
********The 91th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 92th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 93th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 5))))
********The 94th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 95th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 96th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 2))))
********The 97th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 3) (seq.unit 4))))
********The 98th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 99th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 5))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?r) x) (select (mapping ?p0) x))))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?r) x) (select (mapping ?p0) x))))))
********The 0th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 1th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 2) (seq.unit 4))))
********The 2th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 5))))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 5) (seq.unit 6))))
********The 4th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 5th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1) (seq.unit 3))))
********The 6th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 7th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 8th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 6))))
********The 9th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 10th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 6))))
********The 11th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 12th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 13th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 14th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 6))))
********The 15th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 16th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 3) (seq.unit 4) (seq.unit 5))))
********The 17th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 5) (seq.unit 6))))
********The 18th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3))))
********The 19th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2))))
********The 20th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 21th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 22th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 23th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 5))))
********The 24th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 4))))
********The 25th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 2) (seq.unit 3))))
********The 26th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 6))))
********The 27th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0))))
********The 28th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1))))
********The 29th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 30th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 3) (seq.unit 4))))
********The 31th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 2))))
********The 32th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 4) (seq.unit 6))))
********The 33th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit 2))))
********The 34th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 4) (seq.unit 5) (seq.unit 6))))
********The 35th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 36th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 6))))
********The 37th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1))))
********The 38th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 6))))
********The 39th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4))))
********The 40th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 6))))
********The 41th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 42th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 43th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 44th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 45th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3) (seq.unit 6))))
********The 46th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (= (element ?r) (seq.++ (seq.unit -1))))
********The 47th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 5))))
********The 48th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 5))))
********The 49th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 3))))
********The 50th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0))))
********The 51th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 52th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 6))))
********The 53th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 5))))
********The 54th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 55th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 2) (seq.unit 3) (seq.unit 5))))
********The 56th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 6))))
********The 57th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 58th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 3) (seq.unit 6))))
********The 59th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 60th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 61th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 5))))
********The 62th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 63th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 64th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3))))
********The 65th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 2))))
********The 66th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 6))))
********The 67th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 5))))
********The 68th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 3) (seq.unit 5))))
********The 69th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 70th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 71th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 72th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 1) (seq.unit 4))))
********The 73th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 3))))
********The 74th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 75th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 2) (seq.unit 6))))
********The 76th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 77th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 78th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 4))))
********The 79th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 80th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 6))))
********The 81th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 1) (seq.unit 6))))
********The 82th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 6))))
********The 83th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 84th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 4))))
********The 85th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 6))))
********The 86th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 87th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 88th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 5) (seq.unit 6))))
********The 89th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 90th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 6))))
********The 91th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 5) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 3) (seq.unit 5) (seq.unit 6))))
********The 92th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 93th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 0) (seq.unit 1) (seq.unit 5))))
********The 94th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (= (element ?r) (seq.++ (seq.unit 0))))
********The 95th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 5))))
********The 96th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 6)))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 4) (seq.unit 6))))
********The 97th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 98th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit 3))))
********The 99th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?r) x) (select (mapping ?p0) x))))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 (List Int))
(assert (= (s!ze (element ?p1) 6) (seq.len (element ?p1))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?r) x) (select (mapping ?r) x))))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 5)))))
(assert (= (element ?p1) (seq.++ (seq.unit 0) (seq.unit -1) (seq.unit 6))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 5))))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (= (element ?p1) (as seq.empty (Seq Int))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 4))))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2)))))
(assert (= (element ?p1) (seq.++ (seq.unit 3) (seq.unit 0) (seq.unit -2))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 2))))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (= (element ?p1) (seq.++ (seq.unit 5))))
(assert (= (element ?r) (seq.++ (seq.unit 5))))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4)))))
(assert (= (element ?p1) (seq.++ (seq.unit 1) (seq.unit -1))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 4))))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 5)))))
(assert (= (element ?p1) (seq.++ (seq.unit 4) (seq.unit 3) (seq.unit 6))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 1) (seq.unit 2) (seq.unit 3) (seq.unit 5))))
********The 6th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (= (element ?p1) (as seq.empty (Seq Int))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 1) (seq.unit 2) (seq.unit 4))))
********The 7th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?p1) (seq.++ (seq.unit 2) (seq.unit 3) (seq.unit 4))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 5) (seq.unit 6))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 (List Int))
(assert (= (s!ze (element ?p1) 6) (seq.len (element ?p1))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?r) x))))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?p1) (as seq.empty (Seq Int))))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (= (element ?p1) (seq.++ (seq.unit 1))))
(assert (= (element ?r) (seq.++ (seq.unit 6))))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))))
(assert (= (element ?p1) (seq.++ (seq.unit 6) (seq.unit 0))))
(assert (= (element ?r) (seq.++ (seq.unit 1) (seq.unit 3))))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))))
(assert (= (element ?p1) (seq.++ (seq.unit 0) (seq.unit 6))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 4) (seq.unit 5))))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 3)))))
(assert (= (element ?p1) (as seq.empty (Seq Int))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 0) (seq.unit 3))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 (List Int))
(assert (= (s!ze (element ?p1) 6) (seq.len (element ?p1))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?p0) x) (select (mapping ?p0) x))))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) false)))
(assert (= (element ?p1) (as seq.empty (Seq Int))))
(assert (= (element ?r) (as seq.empty (Seq Int))))
********The 1th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (= (element ?p1) (as seq.empty (Seq Int))))
(assert (= (element ?r) (seq.++ (seq.unit -2))))
********The 2th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3) (= x!1 4)))))
(assert (= (element ?p1) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 3) (seq.unit 1))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit -1) (seq.unit 3) (seq.unit 4))))
********The 3th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (= (element ?p1) (seq.++ (seq.unit 2) (seq.unit -2))))
(assert (= (element ?r) (seq.++ (seq.unit 2) (seq.unit 5) (seq.unit 6))))
********The 4th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))))
(assert (= (element ?p1) (seq.++ (seq.unit 3) (seq.unit -2))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 2) (seq.unit 6))))
********The 5th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5)))))
(assert (= (element ?p1) (seq.++ (seq.unit 5) (seq.unit 2))))
(assert (= (element ?r) (seq.++ (seq.unit 0) (seq.unit 2) (seq.unit 5))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 (List Int))
(assert (= (s!ze (element ?p1) 6) (seq.len (element ?p1))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?r) x) (select (mapping ?r) x))))))
********The 0th test case******** SATISFIABLE
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 5)))))
(assert (= (element ?p1) (seq.++ (seq.unit 0) (seq.unit -2))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 4) (seq.unit 5))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Set Int))
(assert (= (mapping ?p0) ((_ map and) (mapping ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(declare-const ?p1 (List Int))
(assert (= (s!ze (element ?p1) 6) (seq.len (element ?p1))))
(declare-const ?r (List Int))
(assert (= (s!ze (element ?r) 6) (seq.len (element ?r))))
(assert (and  (= true (forall ((x Int)) (=> (select (mapping ?r) x) (select (mapping ?p0) x))))))
********The 0th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4)))))
(assert (= (element ?p1) (seq.++ (seq.unit 3))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 3) (seq.unit 4))))
********The 1th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1)))))
(assert (= (element ?p1) (as seq.empty (Seq Int))))
(assert (= (element ?r) (seq.++ (seq.unit -2) (seq.unit 0) (seq.unit 1))))
********The 2th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (= (element ?p1) (seq.++ (seq.unit 0))))
(assert (= (element ?r) (seq.++ (seq.unit 4))))
********The 3th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
(assert (= (element ?p1) (as seq.empty (Seq Int))))
(assert (= (element ?r) (seq.++ (seq.unit 4) (seq.unit 6))))
********The 4th test case******** UNKNOWN
(assert (= (mapping ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 5)))))
(assert (= (element ?p1) (as seq.empty (Seq Int))))
(assert (= (element ?r) (seq.++ (seq.unit -1) (seq.unit 3) (seq.unit 5))))
