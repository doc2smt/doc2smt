#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 6)))
(assert (and  (= ?r (s!ze (key ?p0) 6))))
********The 0th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 5) 6) (= (select (mapping ?p0) 6) 5))))
(assert (= ?r 2))
********The 1th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 3))))
(assert (= ?r 3))
********The 2th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 3) 3) (= (select (mapping ?p0) 5) -1) (= (select (mapping ?p0) 6) 0))))
(assert (= ?r 5))
********The 3th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 4th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 2))))
(assert (= ?r 1))
********The 5th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 5) 5) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r 5))
********The 6th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 4) 6) (= (select (mapping ?p0) 6) -2))))
(assert (= ?r 3))
********The 7th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 4) -2))))
(assert (= ?r 4))
********The 8th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 2) 0) (= (select (mapping ?p0) 6) 0))))
(assert (= ?r 3))
********The 9th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 3) 4))))
(assert (= ?r 2))
********The 10th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 11th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 12th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 2))))
(assert (= ?r 1))
********The 13th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 6) -2))))
(assert (= ?r 3))
********The 14th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 15th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r 4))
********The 16th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 4) 6))))
(assert (= ?r 2))
********The 17th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 2) -2))))
(assert (= ?r 2))
********The 18th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 4) 2))))
(assert (= ?r 3))
********The 19th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 5) -1))))
(assert (= ?r 5))
********The 20th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 6) 0))))
(assert (= ?r 3))
********The 21th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 2))))
(assert (= ?r 1))
********The 22th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 23th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 24th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 6))))
(assert (= ?r 1))
********The 25th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 1) 1))))
(assert (= ?r 2))
********The 26th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 1))))
(assert (= ?r 1))
********The 27th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 28th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 3) 4))))
(assert (= ?r 2))
********The 29th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 6) -2))))
(assert (= ?r 4))
********The 30th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 3) 5))))
(assert (= ?r 3))
********The 31th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 3) -2))))
(assert (= ?r 4))
********The 32th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 3) 3) (= (select (mapping ?p0) 6) 6))))
(assert (= ?r 4))
********The 33th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 34th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 35th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 6) 0))))
(assert (= ?r 4))
********The 36th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) 5))))
(assert (= ?r 1))
********The 37th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 4) 6))))
(assert (= ?r 3))
********The 38th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 5) 5))))
(assert (= ?r 3))
********The 39th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 40th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 3) 2))))
(assert (= ?r 2))
********The 41th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 5) 0))))
(assert (= ?r 2))
********The 42th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 0))))
(assert (= ?r 1))
********The 43th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 0) 4) (= (select (mapping ?p0) 6) 1))))
(assert (= ?r 3))
********The 44th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 45th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))) (and (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 1) 6))))
(assert (= ?r 2))
********The 46th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 5) 6))))
(assert (= ?r 3))
********The 47th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 0))))
(assert (= ?r 1))
********The 48th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 4))))
(assert (= ?r 1))
********The 49th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 6) 3))))
(assert (= ?r 2))
********The 50th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) 4))))
(assert (= ?r 4))
********The 51th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 52th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) -1))))
(assert (= ?r 1))
********The 53th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 0))))
(assert (= ?r 1))
********The 54th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 6) 1))))
(assert (= ?r 3))
********The 55th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 6) -1))))
(assert (= ?r 2))
********The 56th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 5))))
(assert (= ?r 1))
********The 57th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 3) 3) (= (select (mapping ?p0) 4) 6) (= (select (mapping ?p0) 6) 3))))
(assert (= ?r 5))
********The 58th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 5) 3))))
(assert (= ?r 2))
********The 59th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 6) -1))))
(assert (= ?r 4))
********The 60th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 4) 1) (= (select (mapping ?p0) 5) 3))))
(assert (= ?r 3))
********The 61th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 62th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) -1))))
(assert (= ?r 1))
********The 63th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 3) -1))))
(assert (= ?r 2))
********The 64th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 5) 3))))
(assert (= ?r 3))
********The 65th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 5))))
(assert (= ?r 1))
********The 66th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 67th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) 0))))
(assert (= ?r 4))
********The 68th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 3) 3))))
(assert (= ?r 4))
********The 69th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))) (and (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 4) -2))))
(assert (= ?r 2))
********The 70th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 71th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 1) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r 3))
********The 72th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 73th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 5) -2))))
(assert (= ?r 3))
********The 74th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r 2))
********The 75th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 1) 5))))
(assert (= ?r 2))
********The 76th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 5) -1))))
(assert (= ?r 3))
********The 77th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) -1) 2))))
(assert (= ?r 2))
********The 78th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) -2))))
(assert (= ?r 1))
********The 79th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 5) 0) (= (select (mapping ?p0) 6) 3))))
(assert (= ?r 4))
********The 80th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 4) 0))))
(assert (= ?r 3))
********The 81th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 82th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 4) -2))))
(assert (= ?r 4))
********The 83th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 84th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 5) 6) (= (select (mapping ?p0) 6) -2))))
(assert (= ?r 4))
********The 85th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) -1) 4))))
(assert (= ?r 2))
********The 86th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 4)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 4) 3))))
(assert (= ?r 3))
********The 87th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 5) 1) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r 4))
********The 88th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 3))))
(assert (= ?r 1))
********The 89th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 5) 3) (= (select (mapping ?p0) 6) 1))))
(assert (= ?r 5))
********The 90th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 4) 1) (= (select (mapping ?p0) 5) -1))))
(assert (= ?r 3))
********The 91th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) 3))))
(assert (= ?r 4))
********The 92th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 6))))
(assert (= ?r 1))
********The 93th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 5) 6))))
(assert (= ?r 4))
********The 94th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) 6))))
(assert (= ?r 4))
********The 95th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r 0))
********The 96th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 5) 1))))
(assert (= ?r 3))
********The 97th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 5))))
(assert (= ?r 1))
********The 98th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 5))))
(assert (= ?r 1))
********The 99th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 2))))
(assert (= ?r 1))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r Int)
(assert (and (>= ?r -2) (<= ?r 6)))
(assert (and  (= ?r (s!ze (key ?p0) 6))))
********The 0th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 5) 6))))
********The 1th model******** true
(assert (= ?r 4))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 4) 0))))
********The 2th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 2) 6))))
********The 3th model******** true
(assert (= ?r 4))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 4) 0))))
********The 4th model******** true
(assert (= ?r 4))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 6) 3))))
********The 5th model******** true
(assert (= ?r 1))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 0))))
********The 6th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 3) 3))))
********The 7th model******** true
(assert (= ?r 1))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) 3))))
********The 8th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 4) 1) (= (select (mapping ?p0) 6) -2))))
********The 9th model******** true
(assert (= ?r 0))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 10th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 6) -1))))
********The 11th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 5) 1))))
********The 12th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 3) -1))))
********The 13th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 3) -2))))
********The 14th model******** true
(assert (= ?r 4))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 5) -1))))
********The 15th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 4) 5) (= (select (mapping ?p0) 6) -2))))
********The 16th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 6) 5))))
********The 17th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 5) -2))))
********The 18th model******** true
(assert (= ?r 1))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 1))))
********The 19th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 3) -1))))
********The 20th model******** true
(assert (= ?r 4))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 5) 2))))
********The 21th model******** true
(assert (= ?r 1))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 4))))
********The 22th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) 3) (= (select (mapping ?p0) 6) 1))))
********The 23th model******** true
(assert (= ?r 1))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) 2))))
********The 24th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 2) 4))))
********The 25th model******** true
(assert (= ?r 1))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 0))))
********The 26th model******** true
(assert (= ?r 1))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) -1))))
********The 27th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 1) 3))))
********The 28th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 6) 3))))
********The 29th model******** true
(assert (= ?r 1))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 5))))
********The 30th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) 2) 0) (= (select (mapping ?p0) 3) -2))))
********The 31th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 6) 0))))
********The 32th model******** true
(assert (= ?r 1))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 5))))
********The 33th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 6) -2))))
********The 34th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 6) 0))))
********The 35th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 4) 6))))
********The 36th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 5) 4) (= (select (mapping ?p0) 6) 2))))
********The 37th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 5) -1))))
********The 38th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 4) -1))))
********The 39th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 3) 6))))
********The 40th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 0) 2))))
********The 41th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 4) 6) (= (select (mapping ?p0) 5) -2))))
********The 42th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 5) 0))))
********The 43th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 4) -2))))
********The 44th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 6) 2))))
********The 45th model******** true
(assert (= ?r 2))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 5) 1))))
********The 46th model******** true
(assert (= ?r 3))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 6) 5))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r Bool)
(assert (= ?r (= (s!ze (key ?p0) 6) 0)))
********The 0th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 4) 5) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r false))
********The 1th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 4) -2))))
(assert (= ?r false))
********The 2th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 4) 5) (= (select (mapping ?p0) 6) -1))))
(assert (= ?r false))
********The 3th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 4th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 4) 2))))
(assert (= ?r false))
********The 5th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 2) 0))))
(assert (= ?r false))
********The 6th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 7th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 8th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 6) 6))))
(assert (= ?r false))
********The 9th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 4))))
(assert (= ?r false))
********The 10th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 4) 3) (= (select (mapping ?p0) 5) 3))))
(assert (= ?r false))
********The 11th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 5) 2))))
(assert (= ?r false))
********The 12th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 5) 4) (= (select (mapping ?p0) 6) -2))))
(assert (= ?r false))
********The 13th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) 6))))
(assert (= ?r false))
********The 14th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r false))
********The 15th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 16th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) -2))))
(assert (= ?r false))
********The 17th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 18th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 5) -1) (= (select (mapping ?p0) 6) -2))))
(assert (= ?r false))
********The 19th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 4) 5))))
(assert (= ?r false))
********The 20th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 6) 1))))
(assert (= ?r false))
********The 21th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 22th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 1) (= (select (mapping ?p0) 3) 5))))
(assert (= ?r false))
********The 23th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 4) -1))))
(assert (= ?r false))
********The 24th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 5) 4) (= (select (mapping ?p0) 6) 1))))
(assert (= ?r false))
********The 25th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 4) 5))))
(assert (= ?r false))
********The 26th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 27th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 2))))
(assert (= ?r false))
********The 28th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 29th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) -2))))
(assert (= ?r false))
********The 30th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 2))))
(assert (= ?r false))
********The 31th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 32th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 33th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 2) 4))))
(assert (= ?r false))
********The 34th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 3))))
(assert (= ?r false))
********The 35th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r false))
********The 36th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 2) -2))))
(assert (= ?r false))
********The 37th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 38th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 4) 1))))
(assert (= ?r false))
********The 39th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 6) 5))))
(assert (= ?r false))
********The 40th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 4))))
(assert (= ?r false))
********The 41th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 4) 2) (= (select (mapping ?p0) 5) -1) (= (select (mapping ?p0) 6) 6))))
(assert (= ?r false))
********The 42th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 1) 6))))
(assert (= ?r false))
********The 43th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 3))))
(assert (= ?r false))
********The 44th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) -1))))
(assert (= ?r false))
********The 45th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 46th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 47th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 4) 6))))
(assert (= ?r false))
********The 48th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 5) 4))))
(assert (= ?r false))
********The 49th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 5) -2))))
(assert (= ?r false))
********The 50th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 5) 3) (= (select (mapping ?p0) 6) -2))))
(assert (= ?r false))
********The 51th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 5))))
(assert (= ?r false))
********The 52th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 53th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 2))))
(assert (= ?r false))
********The 54th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 6))))
(assert (= ?r false))
********The 55th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) -2))))
(assert (= ?r false))
********The 56th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 4) 5))))
(assert (= ?r false))
********The 57th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r false))
********The 58th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r false))
********The 59th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 4) 3) (= (select (mapping ?p0) 5) -1) (= (select (mapping ?p0) 6) 5))))
(assert (= ?r false))
********The 60th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 4) 0))))
(assert (= ?r false))
********The 61th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 0))))
(assert (= ?r false))
********The 62th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 3) 2))))
(assert (= ?r false))
********The 63th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) -1))))
(assert (= ?r false))
********The 64th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 4) -1) (= (select (mapping ?p0) 6) 2))))
(assert (= ?r false))
********The 65th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 4) 6))))
(assert (= ?r false))
********The 66th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 4) 0))))
(assert (= ?r false))
********The 67th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 2) 0) (= (select (mapping ?p0) 4) 1))))
(assert (= ?r false))
********The 68th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 4) -1))))
(assert (= ?r false))
********The 69th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 1) -2))))
(assert (= ?r false))
********The 70th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 6) -1))))
(assert (= ?r false))
********The 71th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 72th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 0))))
(assert (= ?r false))
********The 73th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 6) 5))))
(assert (= ?r false))
********The 74th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) 6))))
(assert (= ?r false))
********The 75th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 76th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 4) 3) (= (select (mapping ?p0) 5) 5) (= (select (mapping ?p0) 6) 4))))
(assert (= ?r false))
********The 77th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 6) 5))))
(assert (= ?r false))
********The 78th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 0) 1))))
(assert (= ?r false))
********The 79th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 3) 4))))
(assert (= ?r false))
********The 80th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 3))))
(assert (= ?r false))
********The 81th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 4) 6) (= (select (mapping ?p0) 5) 6))))
(assert (= ?r false))
********The 82th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 3)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 3) 1))))
(assert (= ?r false))
********The 83th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 4) 5) (= (select (mapping ?p0) 5) 5))))
(assert (= ?r false))
********The 84th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 4) 6) (= (select (mapping ?p0) 5) 1))))
(assert (= ?r false))
********The 85th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 4) 5) (= (select (mapping ?p0) 5) 1))))
(assert (= ?r false))
********The 86th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 5) -1))))
(assert (= ?r false))
********The 87th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 2) 4))))
(assert (= ?r false))
********The 88th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 3) 6))))
(assert (= ?r false))
********The 89th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 4) -2))))
(assert (= ?r false))
********The 90th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) 1))))
(assert (= ?r false))
********The 91th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 92th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 6) 0))))
(assert (= ?r false))
********The 93th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 2) 1))))
(assert (= ?r false))
********The 94th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 3) -2))))
(assert (= ?r false))
********The 95th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 6) -1))))
(assert (= ?r false))
********The 96th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 5) 4))))
(assert (= ?r false))
********The 97th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 4) 5))))
(assert (= ?r false))
********The 98th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 99th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 4) 4))))
(assert (= ?r false))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r Bool)
(assert (= ?r (= (s!ze (key ?p0) 6) 0)))
********The 0th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 0))))
********The 1th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) -1) 6))))
********The 2th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 4) 5))))
********The 3th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) 2))))
********The 4th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 1) -1))))
********The 5th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) -1))))
********The 6th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 5) 3) (= (select (mapping ?p0) 6) -2))))
********The 7th model******** true
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 8th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 1) -2))))
********The 9th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 6))))
********The 10th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 3) -2))))
********The 11th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) -1))))
********The 12th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 6) 0))))
********The 13th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 4) 1))))
********The 14th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 5))))
********The 15th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) -2))))
********The 16th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) -1))))
********The 17th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 5) -2))))
********The 18th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 5) 0))))
********The 19th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 3) -2))))
********The 20th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 6))))
********The 21th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 4) 3))))
********The 22th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 3) 5))))
********The 23th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 5) -2))))
********The 24th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 4) -2))))
********The 25th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 2) 6))))
********The 26th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 1) (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 6) -2))))
********The 27th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 6) -1))))
********The 28th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 3) 2))))
********The 29th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 6) 2))))
********The 30th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 4) 3))))
********The 31th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 0) 4))))
********The 32th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 6) 4))))
********The 33th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 6) 2))))
********The 34th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 3) -1))))
********The 35th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 3) -1))))
********The 36th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 6) -2))))
********The 37th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 6) -2))))
********The 38th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 6) 1))))
********The 39th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 6) 1))))
********The 40th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) 5))))
********The 41th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 6) 2))))
********The 42th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 3) 1))))
********The 43th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 0) -2))))
********The 44th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 3) 5))))
********The 45th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 5) -2))))
********The 46th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 5) -1))))
********The 47th model******** true
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 3) 5))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r (Set Int))
(assert (= (mapping ?r) ((_ map and) (mapping ?r) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (and  (= true (= (mapping ?r) (key ?p0)))))
********The 0th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) 3) (= (select (mapping ?p0) 5) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 5)))))
********The 1th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 6) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))))
********The 2th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 3th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0)))))
********The 4th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 5th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))) (and (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 1) -2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
********The 6th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 4) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))))
********The 7th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 8th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 5) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
********The 9th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 4) -1) (= (select (mapping ?p0) 5) -2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))))
********The 10th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 11th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 6) 4))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 6)))))
********The 12th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 6))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1)))))
********The 13th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 6) -2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 6)))))
********The 14th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 5) 6))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 5)))))
********The 15th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) -1) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
********The 16th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 17th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 3) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))))
********The 18th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5) (= x!1 6)))))
********The 19th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 20th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 4) 3) (= (select (mapping ?p0) 6) 2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))))
********The 21th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 22th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 0) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))))
********The 23th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 24th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 6) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 6)))))
********The 25th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 5) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 5)))))
********The 26th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4)))))
********The 27th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 1) 6))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1)))))
********The 28th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 4) -1) (= (select (mapping ?p0) 6) -1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4) (= x!1 6)))))
********The 29th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 6)))))
********The 30th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 5) -2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))))
********The 31th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 4) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4)))))
********The 32th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 2) 0) (= (select (mapping ?p0) 4) 1) (= (select (mapping ?p0) 6) -1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 6)))))
********The 33th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 5) 2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5)))))
********The 34th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 5) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))))
********The 35th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) 2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 6)))))
********The 36th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 5) 3) (= (select (mapping ?p0) 6) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))))
********The 37th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))) (and (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 4) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))))
********The 38th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))) (and (= (select (mapping ?p0) 0) 4) (= (select (mapping ?p0) 4) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))))
********The 39th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 6) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 6)))))
********The 40th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 6) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))))
********The 41th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 6) -1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))))
********The 42th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 4) (= (select (mapping ?p0) 3) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))))
********The 43th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 5) 2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))))
********The 44th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 6))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 45th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 3) (= (select (mapping ?p0) 6) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4) (= x!1 5) (= x!1 6)))))
********The 46th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 4) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
********The 47th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 48th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 4) -2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 4)))))
********The 49th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 0) 2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))))
********The 50th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 51th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 1) 4))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1)))))
********The 52th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 53th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 54th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 4) 2) (= (select (mapping ?p0) 5) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4) (= x!1 5)))))
********The 55th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 6) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
********The 56th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3)))))
********The 57th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 4) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
********The 58th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 4))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 6)))))
********The 59th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 1) -2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))))
********The 60th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 6))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2)))))
********The 61th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 2) 6))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))))
********The 62th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))))
********The 63th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 5) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 5)))))
********The 64th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 5) 6) (= (select (mapping ?p0) 6) 6))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5) (= x!1 6)))))
********The 65th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 0) 4) (= (select (mapping ?p0) 2) 6))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2)))))
********The 66th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4)))))
********The 67th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 3) 2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3)))))
********The 68th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 5) -1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 5)))))
********The 69th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 2) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2)))))
********The 70th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) -1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1)))))
********The 71th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 4) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4)))))
********The 72th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 4) 3) (= (select (mapping ?p0) 6) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 4) (= x!1 6)))))
********The 73th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1)))))
********The 74th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 75th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))) (and (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 1) -1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))))
********The 76th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 4) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))))
********The 77th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 6) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 6)))))
********The 78th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 5) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5)))))
********The 79th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 5) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 5)))))
********The 80th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 4) 2) (= (select (mapping ?p0) 6) 2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4) (= x!1 6)))))
********The 81th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 6) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 6)))))
********The 82th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 2) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
********The 83th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 2) -2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2)))))
********The 84th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 85th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 3) 3))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3)))))
********The 86th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 3) -1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))))
********The 87th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 3) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3)))))
********The 88th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 89th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 4) 6))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))))
********The 90th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 5) 1) (= (select (mapping ?p0) 6) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))))
********The 91th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 3) 4) (= (select (mapping ?p0) 4) 4))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4)))))
********The 92th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 4) -1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2) (= x!1 4)))))
********The 93th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
********The 94th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 0))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 5)))))
********The 95th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 2) 1))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2)))))
********The 96th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 4) 6) (= (select (mapping ?p0) 6) -2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 4) (= x!1 6)))))
********The 97th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 2))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 6)))))
********The 98th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 3) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3)))))
********The 99th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 3) 5))))
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r (Set Int))
(assert (= (mapping ?r) ((_ map and) (mapping ?r) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (and  (= true (= (mapping ?r) (key ?p0)))))
********The 0th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) false)))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 1th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 0))))
********The 2th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 4) 5))))
********The 3th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 5) 5) (= (select (mapping ?p0) 6) 5))))
********The 4th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 6) 3))))
********The 5th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 5) -2) (= (select (mapping ?p0) 6) 6))))
********The 6th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5) (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 5) 0) (= (select (mapping ?p0) 6) 1))))
********The 7th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 5)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 5) -2))))
********The 8th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 5) 4))))
********The 9th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 4)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 4) 6))))
********The 10th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 4) -1))))
********The 11th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 5) -1))))
********The 12th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 1) 5))))
********The 13th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 6) 0))))
********The 14th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 3) -1))))
********The 15th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 4) 0))))
********The 16th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 1) -1))))
********The 17th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 2) -1))))
********The 18th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) 1) (= (select (mapping ?p0) 6) 2))))
********The 19th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 6) 5))))
********The 20th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 4) -1) (= (select (mapping ?p0) 5) 3))))
********The 21th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 5)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 0))))
********The 22th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) -1) -2))))
********The 23th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 1) 4) (= (select (mapping ?p0) 3) 5))))
********The 24th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 4))))
********The 25th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 1)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) -1))))
********The 26th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 1))))
********The 27th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 2) -2))))
********The 28th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 4)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 2))))
********The 29th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 3)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) -2))))
********The 30th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 2)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) 5))))
********The 31th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 4) 3))))
********The 32th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 2))))
********The 33th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 1) 2))))
********The 34th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 4) -2))))
********The 35th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4) (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 4) 3) (= (select (mapping ?p0) 6) -1))))
********The 36th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 3) -2))))
********The 37th model******** true
(assert (= (mapping ?r) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 6) 2))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Array (Entry Int Int) Bool))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r (Set (Entry Int Int)))
(assert (and (and (forall ((x Int)(y Int)) (ite (and (select (key ?p0) x) (= y (select (mapping ?p0) x))) (select t0 ((as mk-entry (Entry Int Int)) x y)) (not (select t0 ((as mk-entry (Entry Int Int)) x y))))) ) (= true (= (mapping ?r) t0))))
********The 0th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 5) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 2)) (= x!1 (mk-entry 5 5))))))
********The 1th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 5) -2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -1)) (= x!1 (mk-entry 0 2)) (= x!1 (mk-entry 2 5)) (= x!1 (mk-entry 5 -2))))))
********The 2th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 4 0)) (= x!1 (mk-entry 5 2)) (= x!1 (mk-entry 6 6))))))
********The 3th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 4) 3))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 2 4)) (= x!1 (mk-entry 4 3))))))
********The 4th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 5th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 2) 3))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 5)) (= x!1 (mk-entry 2 3))))))
********The 6th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 5) 3) (= (select (mapping ?p0) 6) 1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 3)) (= x!1 (mk-entry 5 3)) (= x!1 (mk-entry 6 1))))))
********The 7th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 5))))))
********The 8th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 4) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 3)) (= x!1 (mk-entry 1 5)) (= x!1 (mk-entry 4 -1))))))
********The 9th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 5) 1) (= (select (mapping ?p0) 6) -2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 5 1)) (= x!1 (mk-entry 6 -2))))))
********The 10th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 6) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 1)) (= x!1 (mk-entry 2 4)) (= x!1 (mk-entry 6 -1))))))
********The 11th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 5) -2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 3)) (= x!1 (mk-entry 5 -2))))))
********The 12th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 13th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 6))))))
********The 14th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 4) 2) (= (select (mapping ?p0) 5) 2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -1)) (= x!1 (mk-entry 2 1)) (= x!1 (mk-entry 4 2)) (= x!1 (mk-entry 5 2))))))
********The 15th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 6) -2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 0)) (= x!1 (mk-entry 6 -2))))))
********The 16th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 17th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 5 6))))))
********The 18th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 19th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 2) 2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 0)) (= x!1 (mk-entry 0 6)) (= x!1 (mk-entry 2 2))))))
********The 20th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 21th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 1 0)) (= x!1 (mk-entry 5 2)) (= x!1 (mk-entry 6 5))))))
********The 22th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) -1) 1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 1)) (= x!1 (mk-entry -1 1))))))
********The 23th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 4) 4) (= (select (mapping ?p0) 6) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 5)) (= x!1 (mk-entry 2 5)) (= x!1 (mk-entry 4 4)) (= x!1 (mk-entry 6 5))))))
********The 24th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 2) 0) (= (select (mapping ?p0) 5) 1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 6)) (= x!1 (mk-entry 0 6)) (= x!1 (mk-entry 2 0)) (= x!1 (mk-entry 5 1))))))
********The 25th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 4) -2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 1 -2)) (= x!1 (mk-entry 4 -2))))))
********The 26th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p0) 0) -1) (= (select (mapping ?p0) 2) 0))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 -1)) (= x!1 (mk-entry 2 0))))))
********The 27th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) -2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 2 -2))))))
********The 28th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 6) 3))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 4)) (= x!1 (mk-entry 1 6)) (= x!1 (mk-entry 3 0)) (= x!1 (mk-entry 6 3))))))
********The 29th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 0))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 1 0))))))
********The 30th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 4 5))))))
********The 31th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 3) 1) (= (select (mapping ?p0) 4) -1) (= (select (mapping ?p0) 6) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 5)) (= x!1 (mk-entry 3 1)) (= x!1 (mk-entry 4 -1)) (= x!1 (mk-entry 6 6))))))
********The 32th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 6) 3))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 1 3)) (= x!1 (mk-entry 2 3)) (= x!1 (mk-entry 3 0)) (= x!1 (mk-entry 6 3))))))
********The 33th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 6) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 0)) (= x!1 (mk-entry 0 2)) (= x!1 (mk-entry 2 1)) (= x!1 (mk-entry 6 4))))))
********The 34th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 5))))))
********The 35th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 4) 6) (= (select (mapping ?p0) 5) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -2)) (= x!1 (mk-entry -1 -1)) (= x!1 (mk-entry 2 6)) (= x!1 (mk-entry 4 6)) (= x!1 (mk-entry 5 4))))))
********The 36th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 6) 2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -2)) (= x!1 (mk-entry -1 -2)) (= x!1 (mk-entry 0 5)) (= x!1 (mk-entry 6 2))))))
********The 37th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 5) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -1)) (= x!1 (mk-entry 5 5))))))
********The 38th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 5) 5) (= (select (mapping ?p0) 6) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -1)) (= x!1 (mk-entry 2 2)) (= x!1 (mk-entry 3 6)) (= x!1 (mk-entry 5 5)) (= x!1 (mk-entry 6 4))))))
********The 39th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 4) -1) (= (select (mapping ?p0) 5) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 1 -2)) (= x!1 (mk-entry 2 3)) (= x!1 (mk-entry 4 -1)) (= x!1 (mk-entry 5 6))))))
********The 40th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 41th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 4) 3))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 2 -2)) (= x!1 (mk-entry 4 3))))))
********The 42th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 43th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 44th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 1) (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 1)) (= x!1 (mk-entry 4 0)) (= x!1 (mk-entry 5 2))))))
********The 45th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 0) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 6)) (= x!1 (mk-entry 0 6))))))
********The 46th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 4) 3) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 4 3)) (= x!1 (mk-entry 5 2)) (= x!1 (mk-entry 6 4))))))
********The 47th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 5) 3))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 1)) (= x!1 (mk-entry 1 1)) (= x!1 (mk-entry 3 2)) (= x!1 (mk-entry 5 3))))))
********The 48th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 4) 3))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 5)) (= x!1 (mk-entry 4 3))))))
********The 49th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1)))) (and (= (select (mapping ?p0) 0) 1) (= (select (mapping ?p0) 1) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 1)) (= x!1 (mk-entry 1 -1))))))
********The 50th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 51th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 52th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 5) 6) (= (select (mapping ?p0) 6) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 -1)) (= x!1 (mk-entry 2 2)) (= x!1 (mk-entry 5 6)) (= x!1 (mk-entry 6 6))))))
********The 53th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 4) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 1 -1)) (= x!1 (mk-entry 4 6))))))
********The 54th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 5) -1) (= (select (mapping ?p0) 6) 0))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 -2)) (= x!1 (mk-entry 5 -1)) (= x!1 (mk-entry 6 0))))))
********The 55th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 2) 2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 3)) (= x!1 (mk-entry 2 2))))))
********The 56th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 2) 0) (= (select (mapping ?p0) 5) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 6)) (= x!1 (mk-entry 1 -1)) (= x!1 (mk-entry 2 0)) (= x!1 (mk-entry 5 -1))))))
********The 57th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 5))))))
********The 58th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 59th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 60th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 61th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 0) 4) (= (select (mapping ?p0) 4) 1) (= (select (mapping ?p0) 5) -2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 4)) (= x!1 (mk-entry 0 4)) (= x!1 (mk-entry 4 1)) (= x!1 (mk-entry 5 -2))))))
********The 62th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 5)) (= x!1 (mk-entry 0 3)) (= x!1 (mk-entry 2 2)) (= x!1 (mk-entry 3 -1))))))
********The 63th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 5) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 1)) (= x!1 (mk-entry 3 6)) (= x!1 (mk-entry 5 4))))))
********The 64th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 4 4))))))
********The 65th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 4) 5) (= (select (mapping ?p0) 6) 2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 5)) (= x!1 (mk-entry -1 2)) (= x!1 (mk-entry 1 6)) (= x!1 (mk-entry 4 5)) (= x!1 (mk-entry 6 2))))))
********The 66th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 5 6))))))
********The 67th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) 1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 3)) (= x!1 (mk-entry 0 2)) (= x!1 (mk-entry 2 1))))))
********The 68th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 3) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 3)) (= x!1 (mk-entry 2 3)) (= x!1 (mk-entry 3 -1))))))
********The 69th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 4) -1) (= (select (mapping ?p0) 6) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 6)) (= x!1 (mk-entry 1 -2)) (= x!1 (mk-entry 4 -1)) (= x!1 (mk-entry 6 6))))))
********The 70th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 6) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 6)) (= x!1 (mk-entry 0 6)) (= x!1 (mk-entry 3 0)) (= x!1 (mk-entry 6 4))))))
********The 71th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 6) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 5)) (= x!1 (mk-entry 2 4)) (= x!1 (mk-entry 6 4))))))
********The 72th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 73th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 2)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 2) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -2)) (= x!1 (mk-entry -1 -1)) (= x!1 (mk-entry 2 5))))))
********The 74th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 -1))))))
********The 75th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 6) 3))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 4)) (= x!1 (mk-entry 6 3))))))
********The 76th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 5) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 4)) (= x!1 (mk-entry 2 -2)) (= x!1 (mk-entry 5 -1))))))
********The 77th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 0))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 1)) (= x!1 (mk-entry 2 -2)) (= x!1 (mk-entry 4 0)) (= x!1 (mk-entry 5 0))))))
********The 78th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 79th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 3 6))))))
********The 80th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 5) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 0)) (= x!1 (mk-entry -1 6)) (= x!1 (mk-entry 0 0)) (= x!1 (mk-entry 5 -1))))))
********The 81th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 6) 5))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 3)) (= x!1 (mk-entry -1 1)) (= x!1 (mk-entry 6 5))))))
********The 82th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 6) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -1)) (= x!1 (mk-entry 6 4))))))
********The 83th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 4 -1))))))
********The 84th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 6) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 2)) (= x!1 (mk-entry 2 -2)) (= x!1 (mk-entry 6 6))))))
********The 85th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 6) 2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -2)) (= x!1 (mk-entry -1 0)) (= x!1 (mk-entry 1 3)) (= x!1 (mk-entry 3 -2)) (= x!1 (mk-entry 6 2))))))
********The 86th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 4) 4))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 2 2)) (= x!1 (mk-entry 3 2)) (= x!1 (mk-entry 4 4))))))
********The 87th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 0) 4) (= (select (mapping ?p0) 5) 2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 6)) (= x!1 (mk-entry 0 4)) (= x!1 (mk-entry 5 2))))))
********The 88th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 3 -1))))))
********The 89th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -1))))))
********The 90th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
********The 91th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 0) 2) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 5) -2))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 0)) (= x!1 (mk-entry 0 2)) (= x!1 (mk-entry 2 1)) (= x!1 (mk-entry 5 -2))))))
********The 92th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 4) 6) (= (select (mapping ?p0) 6) 0))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 6)) (= x!1 (mk-entry 4 6)) (= x!1 (mk-entry 6 0))))))
********The 93th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 5 1))))))
********The 94th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 4 0)) (= x!1 (mk-entry 5 6))))))
********The 95th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 6) 1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 3 0)) (= x!1 (mk-entry 6 1))))))
********The 96th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 5) 6))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 1)) (= x!1 (mk-entry 2 3)) (= x!1 (mk-entry 5 6))))))
********The 97th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 3) 3) (= (select (mapping ?p0) 5) -1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -2 -2)) (= x!1 (mk-entry 0 0)) (= x!1 (mk-entry 3 3)) (= x!1 (mk-entry 5 -1))))))
********The 98th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 4) 3))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 5)) (= x!1 (mk-entry 0 3)) (= x!1 (mk-entry 4 3))))))
********The 99th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 1))))
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 1 1))))))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const t0 (Array (Entry Int Int) Bool))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?r (Set (Entry Int Int)))
(assert (and (and (forall ((x Int)(y Int)) (ite (and (select (key ?p0) x) (= y (select (mapping ?p0) x))) (select t0 ((as mk-entry (Entry Int Int)) x y)) (not (select t0 ((as mk-entry (Entry Int Int)) x y))))) ) (= true (= (mapping ?r) t0))))
********The 0th model******** true
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) false)))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 1th model******** true
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 1 0))))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 0))))
********The 2th model******** true
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 0 4)) (= x!1 (mk-entry 6 -2))))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 4) (= (select (mapping ?p0) 6) -2))))
********The 3th model******** true
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 3 5)) (= x!1 (mk-entry 0 6))))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 3) 5))))
********The 4th model******** true
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry -1 -1))))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) -1))))
********The 5th model******** true
(assert (= (mapping ?r) (lambda ((x!1 (Entry Int Int))) (or (= x!1 (mk-entry 5 2)) (= x!1 (mk-entry -2 1))))))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 5) 2))))
#### Test API => SMT ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 (Map Int Int))
(assert (= (key ?p1) ((_ map and) (key ?p1) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p1) x) (and (>= (select (mapping ?p1) x) -2) (<= (select (mapping ?p1) x) 6)))))
(declare-const ?r Bool)
(assert (= ?r (and (= (key ?p0) (key ?p1)) (forall ((k!1 Int)) (=> (select (key ?p0) k!1) (and (= (select (mapping ?p0) k!1) (select (mapping ?p1) k!1))))))))
********The 0th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 6) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p1) -2) 6) (= (select (mapping ?p1) 3) -2) (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
********The 1th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 6) 2))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3)))) (and (= (select (mapping ?p1) -1) 2) (= (select (mapping ?p1) 0) 5) (= (select (mapping ?p1) 3) 0))))
(assert (= ?r false))
********The 2th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 3) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p1) 1) 3) (= (select (mapping ?p1) 3) 4))))
(assert (= ?r false))
********The 3th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 4th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p1) 4) 6) (= (select (mapping ?p1) 6) 3))))
(assert (= ?r false))
********The 5th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
********The 6th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p1) 5) 1))))
(assert (= ?r false))
********The 7th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 4) 6))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
********The 8th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 5) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p1) -2) 1) (= (select (mapping ?p1) 0) 4) (= (select (mapping ?p1) 2) 2))))
(assert (= ?r false))
********The 9th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p0) 2) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) 3))))
(assert (= ?r false))
********The 10th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 5) 5) (= (select (mapping ?p0) 6) 3))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p1) -2) 4) (= (select (mapping ?p1) 0) 4) (= (select (mapping ?p1) 6) 0))))
(assert (= ?r false))
********The 11th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 3) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p1) -2) 2) (= (select (mapping ?p1) 3) 3) (= (select (mapping ?p1) 6) 0))))
(assert (= ?r false))
********The 12th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 3) 3) (= (select (mapping ?p0) 4) -2))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p1) -2) -2) (= (select (mapping ?p1) 1) -1) (= (select (mapping ?p1) 2) 6) (= (select (mapping ?p1) 3) 0) (= (select (mapping ?p1) 5) 6))))
(assert (= ?r false))
********The 13th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 1) (= (select (mapping ?p0) 3) 3) (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
********The 14th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 4) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p1) -1) -2) (= (select (mapping ?p1) 0) 5) (= (select (mapping ?p1) 1) 0) (= (select (mapping ?p1) 3) 5) (= (select (mapping ?p1) 5) 6))))
(assert (= ?r false))
********The 15th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p1) -2) 5) (= (select (mapping ?p1) 0) -2) (= (select (mapping ?p1) 1) 3) (= (select (mapping ?p1) 2) -1))))
(assert (= ?r false))
********The 16th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 6) 3))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p1) 0) 3) (= (select (mapping ?p1) 1) 0) (= (select (mapping ?p1) 3) 6) (= (select (mapping ?p1) 4) 3))))
(assert (= ?r false))
********The 17th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 0) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p1) 0) 5) (= (select (mapping ?p1) 1) 2) (= (select (mapping ?p1) 3) -1))))
(assert (= ?r false))
********The 18th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 4) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p1) 3) 1))))
(assert (= ?r false))
********The 19th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p1) 0) 3) (= (select (mapping ?p1) 1) 2) (= (select (mapping ?p1) 3) 4) (= (select (mapping ?p1) 5) 2))))
(assert (= ?r false))
********The 20th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 6) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p1) -2) -2) (= (select (mapping ?p1) 0) -2) (= (select (mapping ?p1) 1) 4) (= (select (mapping ?p1) 5) 6))))
(assert (= ?r false))
********The 21th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 5) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
********The 22th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 1) 3))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p1) -2) 2))))
(assert (= ?r false))
********The 23th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 4) 4) (= (select (mapping ?p0) 5) 6))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p1) 1) 2) (= (select (mapping ?p1) 2) 3) (= (select (mapping ?p1) 4) 3) (= (select (mapping ?p1) 6) 1))))
(assert (= ?r false))
********The 24th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 5) 1) (= (select (mapping ?p0) 6) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p1) 0) 4) (= (select (mapping ?p1) 1) 5) (= (select (mapping ?p1) 2) -1))))
(assert (= ?r false))
********The 25th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 3) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p1) 1) 3) (= (select (mapping ?p1) 4) 3))))
(assert (= ?r false))
********The 26th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 5) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 6) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p1) 2) 6) (= (select (mapping ?p1) 3) 4) (= (select (mapping ?p1) 4) 0))))
(assert (= ?r false))
********The 27th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 6) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2)))) (and (= (select (mapping ?p1) -2) -2) (= (select (mapping ?p1) 2) 5))))
(assert (= ?r false))
********The 28th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 0))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) 6))))
(assert (= ?r false))
********The 29th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 6) 3))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p1) -1) -1) (= (select (mapping ?p1) 2) 3) (= (select (mapping ?p1) 4) 3) (= (select (mapping ?p1) 5) 3))))
(assert (= ?r false))
********The 30th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p1) 2) 0))))
(assert (= ?r false))
********The 31th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) 6))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p1) 2) -2) (= (select (mapping ?p1) 5) 6))))
(assert (= ?r false))
********The 32th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p1) -2) 0) (= (select (mapping ?p1) 0) 1) (= (select (mapping ?p1) 3) 1) (= (select (mapping ?p1) 5) 3))))
(assert (= ?r false))
********The 33th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 5) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 5) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0)))) (and (= (select (mapping ?p1) -1) 5) (= (select (mapping ?p1) 0) 0))))
(assert (= ?r false))
********The 34th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 4) 4) (= (select (mapping ?p0) 6) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1)))) (and (= (select (mapping ?p1) -2) -2) (= (select (mapping ?p1) -1) 3) (= (select (mapping ?p1) 1) 6))))
(assert (= ?r false))
********The 35th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 6) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 2) (= (select (mapping ?p1) 0) 3) (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
********The 36th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p1) 0) 6) (= (select (mapping ?p1) 2) 2) (= (select (mapping ?p1) 5) 6))))
(assert (= ?r false))
********The 37th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 1) 2) (= (select (mapping ?p0) 5) 6) (= (select (mapping ?p0) 6) -2))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p1) -2) 4))))
(assert (= ?r false))
********The 38th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 6) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p1) 0) 5) (= (select (mapping ?p1) 3) 0) (= (select (mapping ?p1) 5) 4))))
(assert (= ?r false))
********The 39th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p1) 0) 3) (= (select (mapping ?p1) 1) -1) (= (select (mapping ?p1) 3) -2) (= (select (mapping ?p1) 4) 1) (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
********The 40th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) 6))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p1) 1) 5) (= (select (mapping ?p1) 3) 5))))
(assert (= ?r false))
********The 41th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 5) 0) (= (select (mapping ?p0) 6) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p1) -1) -1) (= (select (mapping ?p1) 1) 5) (= (select (mapping ?p1) 3) 3) (= (select (mapping ?p1) 4) 3))))
(assert (= ?r false))
********The 42th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 5) -1) (= (select (mapping ?p0) 6) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p1) -2) 6) (= (select (mapping ?p1) -1) 3) (= (select (mapping ?p1) 1) -2) (= (select (mapping ?p1) 4) 1))))
(assert (= ?r false))
********The 43th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1)))) (and (= (select (mapping ?p1) -1) 6) (= (select (mapping ?p1) 0) 0) (= (select (mapping ?p1) 1) 0))))
(assert (= ?r false))
********The 44th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 4) 3))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p1) 1) 3) (= (select (mapping ?p1) 6) 3))))
(assert (= ?r false))
********The 45th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p1) 0) -2) (= (select (mapping ?p1) 1) 4) (= (select (mapping ?p1) 5) 5))))
(assert (= ?r false))
********The 46th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p1) 2) 6) (= (select (mapping ?p1) 3) 2))))
(assert (= ?r false))
********The 47th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p1) 0) 3) (= (select (mapping ?p1) 5) 2) (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
********The 48th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) 0))))
(assert (= ?r false))
********The 49th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) 0))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 4) (= (select (mapping ?p1) 1) 0) (= (select (mapping ?p1) 2) 1) (= (select (mapping ?p1) 6) 1))))
(assert (= ?r false))
********The 50th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p1) 1) 4) (= (select (mapping ?p1) 2) 3) (= (select (mapping ?p1) 3) 3))))
(assert (= ?r false))
********The 51th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 52th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) 5))))
(assert (= ?r false))
********The 53th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 5) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4)))) (and (= (select (mapping ?p1) -2) 0) (= (select (mapping ?p1) -1) 4) (= (select (mapping ?p1) 4) 2))))
(assert (= ?r false))
********The 54th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p1) 1) -1))))
(assert (= ?r false))
********The 55th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p1) -1) -1) (= (select (mapping ?p1) 0) 3) (= (select (mapping ?p1) 3) 0) (= (select (mapping ?p1) 4) 0) (= (select (mapping ?p1) 5) 0))))
(assert (= ?r false))
********The 56th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p1) -2) 4) (= (select (mapping ?p1) 2) -1) (= (select (mapping ?p1) 3) 2) (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
********The 57th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p1) 4) 3) (= (select (mapping ?p1) 6) 6))))
(assert (= ?r false))
********The 58th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 0))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
********The 59th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p1) 0) -1) (= (select (mapping ?p1) 1) 2) (= (select (mapping ?p1) 5) -2))))
(assert (= ?r false))
********The 60th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p1) 1) 1) (= (select (mapping ?p1) 2) -1) (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
********The 61th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 1) -1) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 4) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
********The 62th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 1) (= (select (mapping ?p0) 2) 0) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 4) 4) (= (select (mapping ?p0) 6) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
********The 63th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 4) -2))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p1) 2) 5) (= (select (mapping ?p1) 4) 2) (= (select (mapping ?p1) 6) 1))))
(assert (= ?r false))
********The 64th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 6) -2))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p1) 4) 4))))
(assert (= ?r false))
********The 65th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4)))) (and (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 4) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 1) (= (select (mapping ?p1) 1) 3) (= (select (mapping ?p1) 4) 3) (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
********The 66th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 3) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p1) 1) 0))))
(assert (= ?r false))
********The 67th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p1) -2) -1) (= (select (mapping ?p1) 0) 4) (= (select (mapping ?p1) 1) 6) (= (select (mapping ?p1) 3) 3))))
(assert (= ?r false))
********The 68th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5)))) (and (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 5) 3))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p1) 2) 4) (= (select (mapping ?p1) 5) 1) (= (select (mapping ?p1) 6) 6))))
(assert (= ?r false))
********The 69th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 5)))) (and (= (select (mapping ?p1) -2) 0) (= (select (mapping ?p1) -1) 4) (= (select (mapping ?p1) 5) -1))))
(assert (= ?r false))
********The 70th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
********The 71th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p0) -1) 3) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 2) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p1) -2) 2) (= (select (mapping ?p1) 1) 4) (= (select (mapping ?p1) 2) -2))))
(assert (= ?r false))
********The 72th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p1) -1) 1) (= (select (mapping ?p1) 0) 3) (= (select (mapping ?p1) 2) 2))))
(assert (= ?r false))
********The 73th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
********The 74th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p1) 0) 1) (= (select (mapping ?p1) 1) 2) (= (select (mapping ?p1) 2) -2))))
(assert (= ?r false))
********The 75th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p1) -1) 4) (= (select (mapping ?p1) 3) -1) (= (select (mapping ?p1) 4) 1))))
(assert (= ?r false))
********The 76th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 4) 3) (= (select (mapping ?p0) 6) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p1) 0) 0) (= (select (mapping ?p1) 2) 2) (= (select (mapping ?p1) 6) -1))))
(assert (= ?r false))
********The 77th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 5)))) (and (= (select (mapping ?p1) 2) 3) (= (select (mapping ?p1) 5) 4))))
(assert (= ?r false))
********The 78th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 2) (= (select (mapping ?p1) 0) 4) (= (select (mapping ?p1) 2) -2) (= (select (mapping ?p1) 6) 5))))
(assert (= ?r false))
********The 79th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p0) 3) 0) (= (select (mapping ?p0) 4) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
********The 80th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 3) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 4)))) (and (= (select (mapping ?p1) -2) 0) (= (select (mapping ?p1) -1) 5) (= (select (mapping ?p1) 4) 1))))
(assert (= ?r false))
********The 81th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p1) 0) 4) (= (select (mapping ?p1) 1) 1) (= (select (mapping ?p1) 6) 1))))
(assert (= ?r false))
********The 82th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 2) -1) (= (select (mapping ?p0) 4) 5) (= (select (mapping ?p0) 5) 6))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 4)))) (and (= (select (mapping ?p1) -2) -1) (= (select (mapping ?p1) 0) 2) (= (select (mapping ?p1) 1) -2) (= (select (mapping ?p1) 3) 4) (= (select (mapping ?p1) 4) 0))))
(assert (= ?r false))
********The 83th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p1) 1) 0) (= (select (mapping ?p1) 5) 0) (= (select (mapping ?p1) 6) 0))))
(assert (= ?r false))
********The 84th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 5) 2) (= (select (mapping ?p0) 6) 0))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p1) -2) 2) (= (select (mapping ?p1) 4) 6))))
(assert (= ?r false))
********The 85th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 4)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 4) 2))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p1) -2) 6) (= (select (mapping ?p1) 0) 5) (= (select (mapping ?p1) 1) 4) (= (select (mapping ?p1) 3) 1) (= (select (mapping ?p1) 6) 4))))
(assert (= ?r false))
********The 86th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 6) 4))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p1) -2) 3) (= (select (mapping ?p1) 3) 0) (= (select (mapping ?p1) 4) 4) (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
********The 87th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 0) (= (select (mapping ?p0) 6) 6))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p1) -2) 4) (= (select (mapping ?p1) 0) 3) (= (select (mapping ?p1) 5) 4) (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
********The 88th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 4) -2) (= (select (mapping ?p0) 6) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p1) 5) -1) (= (select (mapping ?p1) 6) 6))))
(assert (= ?r false))
********The 89th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 0) 1) (= (select (mapping ?p0) 3) 1) (= (select (mapping ?p0) 5) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p1) -1) 2) (= (select (mapping ?p1) 4) 0) (= (select (mapping ?p1) 5) 6))))
(assert (= ?r false))
********The 90th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
********The 91th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 6) -2))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 4)))) (and (= (select (mapping ?p1) -1) -2) (= (select (mapping ?p1) 4) 6))))
(assert (= ?r false))
********The 92th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 0) (= x!1 1)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 0) 6) (= (select (mapping ?p0) 1) -2))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 -1) (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p1) -2) -2) (= (select (mapping ?p1) -1) 0) (= (select (mapping ?p1) 0) -2) (= (select (mapping ?p1) 5) 6))))
(assert (= ?r false))
********The 93th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))) (and (= (select (mapping ?p1) -1) -1) (= (select (mapping ?p1) 2) 4))))
(assert (= ?r false))
********The 94th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 2) 5))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p1) -1) -2))))
(assert (= ?r false))
********The 95th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 0) 0) (= (select (mapping ?p0) 5) 3) (= (select (mapping ?p0) 6) 0))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p1) 4) 1))))
(assert (= ?r false))
********The 96th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 2) -2) (= (select (mapping ?p0) 6) 3))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) -1))))
(assert (= ?r false))
********The 97th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
********The 98th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 1) 6) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 6) -1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 2)))) (and (= (select (mapping ?p1) 0) 4) (= (select (mapping ?p1) 2) -1))))
(assert (= ?r false))
********The 99th test case******** SATISFIABLE
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 1) (= x!1 5) (= x!1 6)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 1) 3) (= (select (mapping ?p0) 5) 5) (= (select (mapping ?p0) 6) 1))))
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 2) (= x!1 4) (= x!1 6)))) (and (= (select (mapping ?p1) 1) 0) (= (select (mapping ?p1) 2) -1) (= (select (mapping ?p1) 4) 3) (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
#### Test SMT => API ####
********SMT to be check********
(declare-datatypes (T) ((Set (mk-set (mapping (Array T Bool))))))
(declare-datatypes (T) ((List (mk-list (element (Seq T))))))
(declare-datatypes (T) ((Iterator (mk-iterator (mapping (Array T Bool)) (previous (Array T Bool))))))
(declare-datatypes (K V) ((Map (mk-map (key (Array K Bool)) (mapping (Array K V))))))
(declare-datatypes (K V) ((Entry (mk-entry (key K) (value V)))))
(define-fun-rec s!ze ((a!1 (Array Int Bool)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (select a!1 x!1) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(define-fun-rec m!e ((a!1 (Array Int Bool)) (x!1 Int)) (Seq Int) (ite (< x!1 -2) (as seq.empty (Seq Int)) (ite (select a!1 x!1) (seq.++ (m!e a!1 (- x!1 1)) (seq.unit x!1)) (m!e a!1 (- x!1 1)))))
(define-fun-rec e!m ((a!1 (Seq Int)) (x!1 Int)) (Array Int Bool) (ite (< x!1 -2) ((as const (Array Int Bool)) false) (ite (seq.contains a!1 (seq.unit x!1)) (store (e!m a!1 (- x!1 1)) x!1 true) (e!m a!1 (- x!1 1)))))
(define-fun mapping ((a!1 (List Int))) (Array Int Bool) (e!m (element a!1) 6))
(define-fun-rec s!ze ((a!1 (Seq Int)) (x!1 Int)) Int (ite (< x!1 -2) 0 (ite (seq.contains a!1 (seq.unit x!1)) (+ (s!ze a!1 (- x!1 1)) 1) (s!ze a!1 (- x!1 1)))))
(declare-const ?p0 (Map Int Int))
(assert (= (key ?p0) ((_ map and) (key ?p0) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p0) x) (and (>= (select (mapping ?p0) x) -2) (<= (select (mapping ?p0) x) 6)))))
(declare-const ?p1 (Map Int Int))
(assert (= (key ?p1) ((_ map and) (key ?p1) (lambda ((x!1 Int)) (and (>= x!1 -2) (<= x!1 6))))))
(assert (forall ((x Int)) (=> (select (key ?p1) x) (and (>= (select (mapping ?p1) x) -2) (<= (select (mapping ?p1) x) 6)))))
(declare-const ?r Bool)
(assert (= ?r (and (= (key ?p0) (key ?p1)) (forall ((k!1 Int)) (=> (select (key ?p0) k!1) (and (= (select (mapping ?p0) k!1) (select (mapping ?p1) k!1))))))))
********The 0th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 4) 0) (= (select (mapping ?p0) 5) 5))))
********The 1th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 6) 3))))
********The 2th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p1) -2) 0) (= (select (mapping ?p1) 1) 3))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p0) 0) -2) (= (select (mapping ?p0) 6) 2))))
********The 3th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p1) -2) 4) (= (select (mapping ?p1) 1) 0))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 1) -2) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 4) 1) (= (select (mapping ?p0) 5) 2))))
********The 4th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p1) 4) 2))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 2))))
********The 5th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p1) -2) 0) (= (select (mapping ?p1) 1) 0) (= (select (mapping ?p1) 2) 6) (= (select (mapping ?p1) 3) -2) (= (select (mapping ?p1) 4) 0) (= (select (mapping ?p1) 5) 0))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 6) 0))))
********The 6th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) 0))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 2) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 6) 2))))
********The 7th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p1) 0) 6) (= (select (mapping ?p1) 5) 3))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) 2) (= (select (mapping ?p0) 6) -1))))
********The 8th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 1) (= (select (mapping ?p1) 1) 1) (= (select (mapping ?p1) 2) 4) (= (select (mapping ?p1) 3) -1) (= (select (mapping ?p1) 6) 2))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 6) 2))))
********The 9th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p1) -2) 5) (= (select (mapping ?p1) 1) 1))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 5))))
********The 10th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 0) (= (select (mapping ?p1) 1) 1) (= (select (mapping ?p1) 2) 6) (= (select (mapping ?p1) 6) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 4))))
********The 11th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p1) -1) -2) (= (select (mapping ?p1) 2) 0) (= (select (mapping ?p1) 3) -1) (= (select (mapping ?p1) 6) -1))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 12th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p1) -2) 0) (= (select (mapping ?p1) 1) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 5) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 2) 5) (= (select (mapping ?p0) 6) -2))))
********The 13th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 14th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 0) (= (select (mapping ?p0) 6) 6))))
********The 15th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p1) 0) 1) (= (select (mapping ?p1) 5) -1))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 4) (= (select (mapping ?p0) 5) 1))))
********The 16th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 6) (= (select (mapping ?p1) 2) 2) (= (select (mapping ?p1) 6) -1))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 2) 2) (= (select (mapping ?p0) 6) -1))))
********The 17th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p1) -2) 2) (= (select (mapping ?p1) 1) 0))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 6))))
********The 18th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p1) -2) 3) (= (select (mapping ?p1) 1) 0) (= (select (mapping ?p1) 2) 6) (= (select (mapping ?p1) 3) 5) (= (select (mapping ?p1) 4) -1) (= (select (mapping ?p1) 5) 2))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) -2) 3) (= (select (mapping ?p0) 1) 0) (= (select (mapping ?p0) 2) 6) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 4) -1) (= (select (mapping ?p0) 5) 2))))
********The 19th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p1) -2) 2) (= (select (mapping ?p1) 4) -1))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 4) -1))))
********The 20th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 6) 0))))
********The 21th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 3) (= (select (mapping ?p1) 3) -2) (= (select (mapping ?p1) 6) 5))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 6) (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 6) 3))))
********The 22th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p1) 4) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 4) 4) (= (select (mapping ?p0) 5) 6))))
********The 23th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p1) 3) 3) (= (select (mapping ?p1) 5) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 0))))
********The 24th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p1) 5) -2))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) -2))))
********The 25th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p1) -2) -2) (= (select (mapping ?p1) 1) 5))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p0) -2) -2) (= (select (mapping ?p0) 1) 5))))
********The 26th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p1) 5) 4))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2)))) (and (= (select (mapping ?p0) -1) -1) (= (select (mapping ?p0) 1) 5) (= (select (mapping ?p0) 2) 0))))
********The 27th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p1) 4) 2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 1) (= (select (mapping ?p0) 4) 6))))
********The 28th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p1) -2) -1))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) -1))))
********The 29th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p1) 5) 5))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 1) (= (select (mapping ?p0) 5) -1))))
********The 30th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p1) -2) 3))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 0))))
********The 31th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p1) 0) 0) (= (select (mapping ?p1) 6) 5))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 3) 5) (= (select (mapping ?p0) 6) 6))))
********The 32th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p1) 1) -1))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 33th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p1) 1) 4))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 4))))
********The 34th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 0))))
********The 35th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p1) 4) 0))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) -2))))
********The 36th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) 2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 4))))
********The 37th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p1) 4) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 4) (= (select (mapping ?p0) 3) -1) (= (select (mapping ?p0) 6) 4))))
********The 38th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p1) -2) 4) (= (select (mapping ?p1) 4) 3))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 3))))
********The 39th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p1) 0) 4) (= (select (mapping ?p1) 6) 4))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 6) 1))))
********The 40th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3)))) (and (= (select (mapping ?p0) 3) 3))))
********The 41th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2)))) (and (= (select (mapping ?p1) -1) 2) (= (select (mapping ?p1) 2) 3))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) -2) (= (select (mapping ?p0) 6) 6))))
********The 42th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p1) 2) 4) (= (select (mapping ?p1) 6) 2))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 4) (= (select (mapping ?p0) 6) 2))))
********The 43th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) 1))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 1))))
********The 44th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p1) 1) 2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 1))))
********The 45th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) 1))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) -2))))
********The 46th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p1) 5) 4))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) -2))))
********The 47th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p1) -2) 5))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 48th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p1) -2) 2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) -2))))
********The 49th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 5)))) (and (= (select (mapping ?p1) 3) 5) (= (select (mapping ?p1) 5) -1))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 0))))
********The 50th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p1) -1) 5))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 5))))
********The 51th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p1) 4) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 52th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) 0))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) -1))))
********The 53th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))) (and (= (select (mapping ?p1) -2) 2) (= (select (mapping ?p1) 3) 3))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 3)))) (and (= (select (mapping ?p0) -2) 2) (= (select (mapping ?p0) 3) 3))))
********The 54th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p1) 4) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 1))))
********The 55th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p1) -1) -2) (= (select (mapping ?p1) 2) 3) (= (select (mapping ?p1) 3) 4))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 2) (= x!1 3)))) (and (= (select (mapping ?p0) -1) -2) (= (select (mapping ?p0) 2) 3) (= (select (mapping ?p0) 3) 4))))
********The 56th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p1) -1) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 4))))
********The 57th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p1) -1) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p0) 3) 6) (= (select (mapping ?p0) 6) 2))))
********The 58th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p1) -2) -1) (= (select (mapping ?p1) 1) 1) (= (select (mapping ?p1) 3) 2))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p0) -2) -1) (= (select (mapping ?p0) 1) 1) (= (select (mapping ?p0) 3) 2))))
********The 59th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) 6))))
********The 60th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p1) 5) 1))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 6))))
********The 61th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) -1))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) -1))))
********The 62th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 6) (= (select (mapping ?p1) 3) 5) (= (select (mapping ?p1) 6) 4))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p0) 0) 3) (= (select (mapping ?p0) 5) -2))))
********The 63th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 0))))
********The 64th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p1) -1) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 65th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 0))))
********The 66th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) 2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 67th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 2) (= x!1 3) (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p1) -2) 5) (= (select (mapping ?p1) 1) 0) (= (select (mapping ?p1) 2) 4) (= (select (mapping ?p1) 3) -2) (= (select (mapping ?p1) 4) 1) (= (select (mapping ?p1) 5) 5))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 2))))
********The 68th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p1) -2) -2) (= (select (mapping ?p1) 4) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 69th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) -2))))
********The 70th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p1) -2) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 6))))
********The 71th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p1) 5) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 72th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) 0))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p0) -2) 0) (= (select (mapping ?p0) 1) 6))))
********The 73th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) 2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 74th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p1) 2) 4) (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 75th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 5)))) (and (= (select (mapping ?p1) 0) 2) (= (select (mapping ?p1) 5) 4))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p0) 6) 6))))
********The 76th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p1) 4) 6) (= (select (mapping ?p1) 5) 0))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4) (= x!1 5)))) (and (= (select (mapping ?p0) 4) 5) (= (select (mapping ?p0) 5) -2))))
********The 77th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p1) -2) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) -2))))
********The 78th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 6)))) (and (= (select (mapping ?p1) -2) 5) (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) -2))))
********The 79th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p0) 2) 1) (= (select (mapping ?p0) 6) 6))))
********The 80th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 3) (= x!1 6)))) (and (= (select (mapping ?p1) 3) 5) (= (select (mapping ?p1) 6) 4))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 81th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 1) (= x!1 2) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 5) (= (select (mapping ?p1) 1) 3) (= (select (mapping ?p1) 2) 1) (= (select (mapping ?p1) 6) 3))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 5)))) (and (= (select (mapping ?p0) 5) -2))))
********The 82th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1) (= x!1 3)))) (and (= (select (mapping ?p1) -2) 6) (= (select (mapping ?p1) 1) 1) (= (select (mapping ?p1) 3) 0))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 83th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p1) 0) 6) (= (select (mapping ?p1) 6) 4))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 84th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p1) 2) 2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 85th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 1)))) (and (= (select (mapping ?p1) -2) 0) (= (select (mapping ?p1) 1) 3))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 86th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 2)))) (and (= (select (mapping ?p1) 2) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) 4))))
********The 87th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0) (= x!1 6)))) (and (= (select (mapping ?p1) 0) -2) (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p0) -1) 5))))
********The 88th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 3))))
********The 89th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p1) 0) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p0) -2) 4) (= (select (mapping ?p0) 4) 5))))
********The 90th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 4)))) (and (= (select (mapping ?p0) 4) 2))))
********The 91th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) false)) (= (mapping ?p1) (lambda ((x!1 Int)) 7))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 5))))
********The 92th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 1) (= (select (mapping ?p1) 6) -2))))
(assert (= ?r true))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p0) -1) 1) (= (select (mapping ?p0) 6) -2))))
********The 93th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p1) -2) 5))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 0)))) (and (= (select (mapping ?p0) -2) 6) (= (select (mapping ?p0) 0) 5))))
********The 94th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 1) (= x!1 6)))) (and (= (select (mapping ?p1) 1) -2) (= (select (mapping ?p1) 6) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
********The 95th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 6)))) (and (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 0)))) (and (= (select (mapping ?p0) 0) -1))))
********The 96th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1)))) (and (= (select (mapping ?p1) -1) 1))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 1)))) (and (= (select (mapping ?p0) 1) 2))))
********The 97th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -2) (= x!1 4)))) (and (= (select (mapping ?p1) -2) 2) (= (select (mapping ?p1) 4) 6))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) 4))))
********The 98th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 2) (= (select (mapping ?p1) 6) 1))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) (or (= x!1 -2)))) (and (= (select (mapping ?p0) -2) -1))))
********The 99th model******** true
(assert (and (= (key ?p1) (lambda ((x!1 Int)) (or (= x!1 -1) (= x!1 6)))) (and (= (select (mapping ?p1) -1) 2) (= (select (mapping ?p1) 6) -2))))
(assert (= ?r false))
(assert (and (= (key ?p0) (lambda ((x!1 Int)) false)) (= (mapping ?p0) (lambda ((x!1 Int)) 7))))
